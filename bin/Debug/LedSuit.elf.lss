
bin/Debug/LedSuit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000d40  00000dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  00800104  00800104  00000dd8  2**0
                  ALLOC
  3 .stab         00002e20  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001640  00000000  00000000  00003bf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	a1 c2       	rjmp	.+1346   	; 0x54a <__vector_3>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	76 c2       	rjmp	.+1260   	; 0x4fa <__vector_6>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	35 c4       	rjmp	.+2154   	; 0x884 <__vector_12>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	5f c4       	rjmp	.+2238   	; 0x8dc <__vector_14>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d1 e0       	ldi	r29, 0x01	; 1
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	e0 e4       	ldi	r30, 0x40	; 64
  3c:	fd e0       	ldi	r31, 0x0D	; 13
  3e:	02 c0       	rjmp	.+4      	; 0x44 <.do_copy_data_start>

00000040 <.do_copy_data_loop>:
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0

00000044 <.do_copy_data_start>:
  44:	a4 30       	cpi	r26, 0x04	; 4
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <.do_copy_data_loop>

0000004a <__do_clear_bss>:
  4a:	11 e0       	ldi	r17, 0x01	; 1
  4c:	a4 e0       	ldi	r26, 0x04	; 4
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	af 35       	cpi	r26, 0x5F	; 95
  56:	b1 07       	cpc	r27, r17
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	cb d2       	rcall	.+1430   	; 0x5f2 <main>
  5c:	6f c6       	rjmp	.+3294   	; 0xd3c <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <PercBetween>:
volatile uint8_t    State= STATE_NULL;
//Effect              CurrentEffect;
LED                 LEDs[NBLED];
Color cBlack;
uint8_t PercBetween(uint8_t v1, uint8_t v2, uint8_t nom, uint8_t denom)
{
  60:	36 2f       	mov	r19, r22
    v2 += (((int16_t)v1 - (int16_t)v2) * (int16_t)nom) / (uint16_t)denom;
  62:	68 2f       	mov	r22, r24
  64:	70 e0       	ldi	r23, 0x00	; 0
  66:	63 1b       	sub	r22, r19
  68:	71 09       	sbc	r23, r1
  6a:	84 2f       	mov	r24, r20
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	3b d5       	rcall	.+2678   	; 0xae6 <__mulhi3>
  70:	62 2f       	mov	r22, r18
  72:	70 e0       	ldi	r23, 0x00	; 0
  74:	56 d5       	rcall	.+2732   	; 0xb22 <__udivmodhi4>
  76:	86 2f       	mov	r24, r22
    return v2;


}
  78:	83 0f       	add	r24, r19
  7a:	08 95       	ret

0000007c <ColorBetween>:
void ColorBetween(Color *c, Color *c1, Color *c2, uint8_t nom, uint8_t denom)
{
  7c:	af 92       	push	r10
  7e:	bf 92       	push	r11
  80:	cf 92       	push	r12
  82:	df 92       	push	r13
  84:	ef 92       	push	r14
  86:	ff 92       	push	r15
  88:	0f 93       	push	r16
  8a:	1f 93       	push	r17
  8c:	5c 01       	movw	r10, r24
  8e:	7b 01       	movw	r14, r22
  90:	6a 01       	movw	r12, r20
  92:	12 2f       	mov	r17, r18
    (*c).R = PercBetween((*c1).R, (*c2).R, nom, denom);
  94:	fb 01       	movw	r30, r22
  96:	80 81       	ld	r24, Z
  98:	fa 01       	movw	r30, r20
  9a:	60 81       	ld	r22, Z
  9c:	42 2f       	mov	r20, r18
  9e:	20 2f       	mov	r18, r16
  a0:	df df       	rcall	.-66     	; 0x60 <PercBetween>
  a2:	f5 01       	movw	r30, r10
  a4:	80 83       	st	Z, r24
    (*c).G = PercBetween((*c1).G, (*c2).G, nom, denom);
  a6:	f7 01       	movw	r30, r14
  a8:	81 81       	ldd	r24, Z+1	; 0x01
  aa:	f6 01       	movw	r30, r12
  ac:	61 81       	ldd	r22, Z+1	; 0x01
  ae:	41 2f       	mov	r20, r17
  b0:	20 2f       	mov	r18, r16
  b2:	d6 df       	rcall	.-84     	; 0x60 <PercBetween>
  b4:	f5 01       	movw	r30, r10
  b6:	81 83       	std	Z+1, r24	; 0x01
    (*c).B = PercBetween((*c1).B, (*c2).B, nom, denom);
  b8:	f7 01       	movw	r30, r14
  ba:	82 81       	ldd	r24, Z+2	; 0x02
  bc:	f6 01       	movw	r30, r12
  be:	62 81       	ldd	r22, Z+2	; 0x02
  c0:	41 2f       	mov	r20, r17
  c2:	20 2f       	mov	r18, r16
  c4:	cd df       	rcall	.-102    	; 0x60 <PercBetween>
  c6:	f5 01       	movw	r30, r10
  c8:	82 83       	std	Z+2, r24	; 0x02
}
  ca:	1f 91       	pop	r17
  cc:	0f 91       	pop	r16
  ce:	ff 90       	pop	r15
  d0:	ef 90       	pop	r14
  d2:	df 90       	pop	r13
  d4:	cf 90       	pop	r12
  d6:	bf 90       	pop	r11
  d8:	af 90       	pop	r10
  da:	08 95       	ret

000000dc <SetHue>:


}

void SetHue(Color *_c, uint8_t _Hue)
{
  dc:	fc 01       	movw	r30, r24
  de:	26 2f       	mov	r18, r22
    uint8_t tmp=_Hue%85;
  e0:	35 e5       	ldi	r19, 0x55	; 85
  e2:	86 2f       	mov	r24, r22
  e4:	65 e5       	ldi	r22, 0x55	; 85
  e6:	11 d5       	rcall	.+2594   	; 0xb0a <__udivmodqi4>
    if(_Hue <= 84)
  e8:	25 35       	cpi	r18, 0x55	; 85
  ea:	30 f4       	brcc	.+12     	; 0xf8 <SetHue+0x1c>
    {
        (*_c).R =84 - tmp;
  ec:	84 e5       	ldi	r24, 0x54	; 84
  ee:	89 1b       	sub	r24, r25
  f0:	80 83       	st	Z, r24
        (*_c).G =tmp;
  f2:	91 83       	std	Z+1, r25	; 0x01
        (*_c).B = 0;
  f4:	12 82       	std	Z+2, r1	; 0x02
  f6:	08 95       	ret
    }
    else if(_Hue <= 170)
  f8:	2b 3a       	cpi	r18, 0xAB	; 171
  fa:	30 f4       	brcc	.+12     	; 0x108 <SetHue+0x2c>
    {
        (*_c).R = 0;
  fc:	10 82       	st	Z, r1
        (*_c).G =84 - tmp;
  fe:	84 e5       	ldi	r24, 0x54	; 84
 100:	89 1b       	sub	r24, r25
 102:	81 83       	std	Z+1, r24	; 0x01
        (*_c).B =tmp;
 104:	92 83       	std	Z+2, r25	; 0x02
 106:	08 95       	ret
    }
    else
    {
        tmp = _Hue-171;
 108:	82 2f       	mov	r24, r18
 10a:	8b 5a       	subi	r24, 0xAB	; 171
        (*_c).B =85 - tmp;
 10c:	38 1b       	sub	r19, r24
 10e:	32 83       	std	Z+2, r19	; 0x02
        (*_c).R =tmp;
 110:	80 83       	st	Z, r24
        (*_c).G = 0;
 112:	11 82       	std	Z+1, r1	; 0x01
 114:	08 95       	ret

00000116 <CloneColor>:
    }
}
Color CloneColor(Color *_c)
{
 116:	df 93       	push	r29
 118:	cf 93       	push	r28
 11a:	00 d0       	rcall	.+0      	; 0x11c <CloneColor+0x6>
 11c:	0f 92       	push	r0
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	fc 01       	movw	r30, r24
    Color c;
    c.R = (*_c).R;
 124:	60 81       	ld	r22, Z
    c.G = (*_c).G;
 126:	71 81       	ldd	r23, Z+1	; 0x01
    c.B = (*_c).B;
    return c;
}
 128:	82 81       	ldd	r24, Z+2	; 0x02
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	cf 91       	pop	r28
 134:	df 91       	pop	r29
 136:	08 95       	ret

00000138 <MatchColor>:

void MatchColor(Color *Source, Color *Destination)
{
 138:	fc 01       	movw	r30, r24
 13a:	db 01       	movw	r26, r22
    (*Destination).R = (*Source).R;
 13c:	80 81       	ld	r24, Z
 13e:	8c 93       	st	X, r24
    (*Destination).G = (*Source).G;
 140:	81 81       	ldd	r24, Z+1	; 0x01
 142:	11 96       	adiw	r26, 0x01	; 1
 144:	8c 93       	st	X, r24
 146:	11 97       	sbiw	r26, 0x01	; 1
    (*Destination).B = (*Source).B;
 148:	82 81       	ldd	r24, Z+2	; 0x02
 14a:	12 96       	adiw	r26, 0x02	; 2
 14c:	8c 93       	st	X, r24
}
 14e:	08 95       	ret

00000150 <DimColor>:

void DimColor(Color *_c, uint8_t v)
{
 150:	fc 01       	movw	r30, r24
 152:	26 2f       	mov	r18, r22
        (*_c).R = ((*_c).R * v) /255;
 154:	60 81       	ld	r22, Z
 156:	82 2f       	mov	r24, r18
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	c4 d4       	rcall	.+2440   	; 0xae6 <__mulhi3>
 15e:	6f ef       	ldi	r22, 0xFF	; 255
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	f3 d4       	rcall	.+2534   	; 0xb4a <__divmodhi4>
 164:	60 83       	st	Z, r22
        (*_c).G = ((*_c).G * v) /255;
 166:	61 81       	ldd	r22, Z+1	; 0x01
 168:	82 2f       	mov	r24, r18
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	bb d4       	rcall	.+2422   	; 0xae6 <__mulhi3>
 170:	6f ef       	ldi	r22, 0xFF	; 255
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	ea d4       	rcall	.+2516   	; 0xb4a <__divmodhi4>
 176:	61 83       	std	Z+1, r22	; 0x01
        (*_c).B = ((*_c).B * v) /255;
 178:	62 81       	ldd	r22, Z+2	; 0x02
 17a:	82 2f       	mov	r24, r18
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	b2 d4       	rcall	.+2404   	; 0xae6 <__mulhi3>
 182:	6f ef       	ldi	r22, 0xFF	; 255
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	e1 d4       	rcall	.+2498   	; 0xb4a <__divmodhi4>
 188:	62 83       	std	Z+2, r22	; 0x02
}
 18a:	08 95       	ret

0000018c <Clip>:

uint8_t Clip(int16_t v)
//Used to make sure the result of an equation is between 0-255
{
    if(v > 255)     return 255;
 18c:	8f 3f       	cpi	r24, 0xFF	; 255
 18e:	91 05       	cpc	r25, r1
 190:	19 f0       	breq	.+6      	; 0x198 <Clip+0xc>
 192:	14 f0       	brlt	.+4      	; 0x198 <Clip+0xc>
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	08 95       	ret
    else if (v <0)  return 0;
 198:	97 fd       	sbrc	r25, 7
 19a:	80 e0       	ldi	r24, 0x00	; 0
    else            return ((uint8_t)v);
}
 19c:	08 95       	ret

0000019e <SetRGB>:

void SetRGB(U8 LedNum, U8 _R, U8 _G, U8 _B)
{
    LEDs[LedNum].c.R = _R;
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	a0 e1       	ldi	r26, 0x10	; 16
 1a2:	b1 e0       	ldi	r27, 0x01	; 1
 1a4:	53 e0       	ldi	r21, 0x03	; 3
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	5a 95       	dec	r21
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <SetRGB+0x8>
 1ae:	fd 01       	movw	r30, r26
 1b0:	e8 0f       	add	r30, r24
 1b2:	f9 1f       	adc	r31, r25
 1b4:	60 83       	st	Z, r22
    LEDs[LedNum].c.G = _G;
 1b6:	41 83       	std	Z+1, r20	; 0x01
    LEDs[LedNum].c.B = _B;
 1b8:	a8 0f       	add	r26, r24
 1ba:	b9 1f       	adc	r27, r25
 1bc:	12 96       	adiw	r26, 0x02	; 2
 1be:	2c 93       	st	X, r18
}
 1c0:	08 95       	ret

000001c2 <SetAllRGB>:

void SetAllRGB(U8 R, U8 G, U8 B)
{
 1c2:	e0 e1       	ldi	r30, 0x10	; 16
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
    else            return ((uint8_t)v);
}

void SetRGB(U8 LedNum, U8 _R, U8 _G, U8 _B)
{
    LEDs[LedNum].c.R = _R;
 1c6:	80 83       	st	Z, r24
    LEDs[LedNum].c.G = _G;
 1c8:	61 83       	std	Z+1, r22	; 0x01
    LEDs[LedNum].c.B = _B;
 1ca:	42 83       	std	Z+2, r20	; 0x02
 1cc:	38 96       	adiw	r30, 0x08	; 8
}

void SetAllRGB(U8 R, U8 G, U8 B)
{
    for(U8 i=0;i<NBLED;i++)
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	e0 34       	cpi	r30, 0x40	; 64
 1d2:	f9 07       	cpc	r31, r25
 1d4:	c1 f7       	brne	.-16     	; 0x1c6 <SetAllRGB+0x4>
        SetRGB(i,R,G,B);
}
 1d6:	08 95       	ret

000001d8 <AllBlack>:
void AllBlack()
{
 1d8:	e0 e1       	ldi	r30, 0x10	; 16
 1da:	f1 e0       	ldi	r31, 0x01	; 1
    else            return ((uint8_t)v);
}

void SetRGB(U8 LedNum, U8 _R, U8 _G, U8 _B)
{
    LEDs[LedNum].c.R = _R;
 1dc:	10 82       	st	Z, r1
    LEDs[LedNum].c.G = _G;
 1de:	11 82       	std	Z+1, r1	; 0x01
    LEDs[LedNum].c.B = _B;
 1e0:	12 82       	std	Z+2, r1	; 0x02
 1e2:	38 96       	adiw	r30, 0x08	; 8
}

void SetAllRGB(U8 R, U8 G, U8 B)
{
    for(U8 i=0;i<NBLED;i++)
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	e0 34       	cpi	r30, 0x40	; 64
 1e8:	f8 07       	cpc	r31, r24
 1ea:	c1 f7       	brne	.-16     	; 0x1dc <AllBlack+0x4>
        SetRGB(i,R,G,B);
}
void AllBlack()
{
    SetAllRGB(0,0,0);
}
 1ec:	08 95       	ret

000001ee <TransferToPWM>:


void TransferToPWM()
{
//    InitPWM();
    PWM_pins[22] = LEDs[0].c.R;//PD2
 1ee:	80 91 10 01 	lds	r24, 0x0110
 1f2:	80 93 56 01 	sts	0x0156, r24
    PWM_pins[21] = LEDs[0].c.G;//PD1
 1f6:	80 91 11 01 	lds	r24, 0x0111
 1fa:	e5 e5       	ldi	r30, 0x55	; 85
 1fc:	f1 e0       	ldi	r31, 0x01	; 1
 1fe:	80 83       	st	Z, r24
    PWM_pins[20] = LEDs[0].c.B;//PD0
 200:	80 91 12 01 	lds	r24, 0x0112
 204:	82 93       	st	-Z, r24

    PWM_pins[3]  = LEDs[1].c.R;//PA3
 206:	80 91 18 01 	lds	r24, 0x0118
 20a:	71 97       	sbiw	r30, 0x11	; 17
 20c:	80 83       	st	Z, r24
    PWM_pins[17] = LEDs[1].c.G;//PC5
 20e:	80 91 19 01 	lds	r24, 0x0119
 212:	3e 96       	adiw	r30, 0x0e	; 14
 214:	80 83       	st	Z, r24
    PWM_pins[16] = LEDs[1].c.B;//PC4
 216:	80 91 1a 01 	lds	r24, 0x011A
 21a:	82 93       	st	-Z, r24

    PWM_pins[15] = LEDs[2].c.R;//PC3
 21c:	80 91 20 01 	lds	r24, 0x0120
 220:	82 93       	st	-Z, r24
    PWM_pins[14] = LEDs[2].c.G;//PC2
 222:	80 91 21 01 	lds	r24, 0x0121
 226:	82 93       	st	-Z, r24
    PWM_pins[13] = LEDs[2].c.B;//PC1
 228:	80 91 22 01 	lds	r24, 0x0122
 22c:	82 93       	st	-Z, r24

    PWM_pins[19] = LEDs[3].c.R;//PC7
 22e:	80 91 28 01 	lds	r24, 0x0128
 232:	36 96       	adiw	r30, 0x06	; 6
 234:	80 83       	st	Z, r24
    PWM_pins[1]  = LEDs[3].c.G;//PA1
 236:	80 91 29 01 	lds	r24, 0x0129
 23a:	72 97       	sbiw	r30, 0x12	; 18
 23c:	80 83       	st	Z, r24
    PWM_pins[12] = LEDs[3].c.B;//PC0
 23e:	80 91 2a 01 	lds	r24, 0x012A
 242:	3b 96       	adiw	r30, 0x0b	; 11
 244:	80 83       	st	Z, r24

    PWM_pins[25] = LEDs[4].c.R;//PD5
 246:	80 91 30 01 	lds	r24, 0x0130
 24a:	80 93 59 01 	sts	0x0159, r24
    PWM_pins[26] = LEDs[4].c.G;//PD6
 24e:	80 91 31 01 	lds	r24, 0x0131
 252:	80 93 5a 01 	sts	0x015A, r24
    PWM_pins[27] = LEDs[4].c.B;//PD7
 256:	80 91 32 01 	lds	r24, 0x0132
 25a:	80 93 5b 01 	sts	0x015B, r24

    PWM_pins[23] = LEDs[5].c.R;//PD3
 25e:	80 91 38 01 	lds	r24, 0x0138
 262:	80 93 57 01 	sts	0x0157, r24
    PWM_pins[24] = LEDs[5].c.G;//PD4
 266:	80 91 39 01 	lds	r24, 0x0139
 26a:	80 93 58 01 	sts	0x0158, r24
    PWM_pins[2]  = LEDs[5].c.B;//PA2
 26e:	80 91 3a 01 	lds	r24, 0x013A
 272:	3a 97       	sbiw	r30, 0x0a	; 10
 274:	80 83       	st	Z, r24

    //PWM_prep();
}
 276:	08 95       	ret

00000278 <Msg>:



void Msg()
{
    if(Message!=STATE_NULL)
 278:	80 91 07 01 	lds	r24, 0x0107
 27c:	88 23       	and	r24, r24
 27e:	09 f4       	brne	.+2      	; 0x282 <Msg+0xa>
 280:	63 c0       	rjmp	.+198    	; 0x348 <Msg+0xd0>
    {
        if (Message==STATE_BAD_MSG_RECEIVED)
 282:	8d 30       	cpi	r24, 0x0D	; 13
 284:	61 f4       	brne	.+24     	; 0x29e <Msg+0x26>
 286:	e0 e1       	ldi	r30, 0x10	; 16
 288:	f1 e0       	ldi	r31, 0x01	; 1
    else            return ((uint8_t)v);
}

void SetRGB(U8 LedNum, U8 _R, U8 _G, U8 _B)
{
    LEDs[LedNum].c.R = _R;
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	80 83       	st	Z, r24
    LEDs[LedNum].c.G = _G;
 28e:	11 82       	std	Z+1, r1	; 0x01
    LEDs[LedNum].c.B = _B;
 290:	12 82       	std	Z+2, r1	; 0x02
 292:	38 96       	adiw	r30, 0x08	; 8
}

void SetAllRGB(U8 R, U8 G, U8 B)
{
    for(U8 i=0;i<NBLED;i++)
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	e0 34       	cpi	r30, 0x40	; 64
 298:	f9 07       	cpc	r31, r25
 29a:	c1 f7       	brne	.-16     	; 0x28c <Msg+0x14>
 29c:	49 c0       	rjmp	.+146    	; 0x330 <Msg+0xb8>
    {
        if (Message==STATE_BAD_MSG_RECEIVED)
        {
            SetAllRGB(255,0,0);
        }
        else if (Message==STATE_OLD_MSG_RECEIVED)
 29e:	8e 30       	cpi	r24, 0x0E	; 14
 2a0:	61 f4       	brne	.+24     	; 0x2ba <Msg+0x42>
 2a2:	e0 e1       	ldi	r30, 0x10	; 16
 2a4:	f1 e0       	ldi	r31, 0x01	; 1

void SetRGB(U8 LedNum, U8 _R, U8 _G, U8 _B)
{
    LEDs[LedNum].c.R = _R;
    LEDs[LedNum].c.G = _G;
    LEDs[LedNum].c.B = _B;
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
    else            return ((uint8_t)v);
}

void SetRGB(U8 LedNum, U8 _R, U8 _G, U8 _B)
{
    LEDs[LedNum].c.R = _R;
 2a8:	10 82       	st	Z, r1
    LEDs[LedNum].c.G = _G;
 2aa:	11 82       	std	Z+1, r1	; 0x01
    LEDs[LedNum].c.B = _B;
 2ac:	82 83       	std	Z+2, r24	; 0x02
 2ae:	38 96       	adiw	r30, 0x08	; 8
}

void SetAllRGB(U8 R, U8 G, U8 B)
{
    for(U8 i=0;i<NBLED;i++)
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	e0 34       	cpi	r30, 0x40	; 64
 2b4:	f9 07       	cpc	r31, r25
 2b6:	c1 f7       	brne	.-16     	; 0x2a8 <Msg+0x30>
 2b8:	3b c0       	rjmp	.+118    	; 0x330 <Msg+0xb8>
        }
        else if (Message==STATE_OLD_MSG_RECEIVED)
        {
            SetAllRGB(0,0,255);
        }
        else if (Message==STATE_BUTTON_PUSHED)
 2ba:	8b 30       	cpi	r24, 0x0B	; 11
 2bc:	61 f4       	brne	.+24     	; 0x2d6 <Msg+0x5e>
 2be:	e0 e1       	ldi	r30, 0x10	; 16
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
}

void SetRGB(U8 LedNum, U8 _R, U8 _G, U8 _B)
{
    LEDs[LedNum].c.R = _R;
    LEDs[LedNum].c.G = _G;
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
    else            return ((uint8_t)v);
}

void SetRGB(U8 LedNum, U8 _R, U8 _G, U8 _B)
{
    LEDs[LedNum].c.R = _R;
 2c4:	10 82       	st	Z, r1
    LEDs[LedNum].c.G = _G;
 2c6:	81 83       	std	Z+1, r24	; 0x01
    LEDs[LedNum].c.B = _B;
 2c8:	12 82       	std	Z+2, r1	; 0x02
 2ca:	38 96       	adiw	r30, 0x08	; 8
}

void SetAllRGB(U8 R, U8 G, U8 B)
{
    for(U8 i=0;i<NBLED;i++)
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	e0 34       	cpi	r30, 0x40	; 64
 2d0:	f9 07       	cpc	r31, r25
 2d2:	c1 f7       	brne	.-16     	; 0x2c4 <Msg+0x4c>
 2d4:	2d c0       	rjmp	.+90     	; 0x330 <Msg+0xb8>
        }
        else if (Message==STATE_BUTTON_PUSHED)
        {
            SetAllRGB(0,255,0);
        }
        else if (Message==STATE_WAS_INTERUPTED)
 2d6:	8f 30       	cpi	r24, 0x0F	; 15
 2d8:	61 f4       	brne	.+24     	; 0x2f2 <Msg+0x7a>
 2da:	e0 e1       	ldi	r30, 0x10	; 16
 2dc:	f1 e0       	ldi	r31, 0x01	; 1
    else            return ((uint8_t)v);
}

void SetRGB(U8 LedNum, U8 _R, U8 _G, U8 _B)
{
    LEDs[LedNum].c.R = _R;
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	80 83       	st	Z, r24
    LEDs[LedNum].c.G = _G;
 2e2:	81 83       	std	Z+1, r24	; 0x01
    LEDs[LedNum].c.B = _B;
 2e4:	82 83       	std	Z+2, r24	; 0x02
 2e6:	38 96       	adiw	r30, 0x08	; 8
}

void SetAllRGB(U8 R, U8 G, U8 B)
{
    for(U8 i=0;i<NBLED;i++)
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	e0 34       	cpi	r30, 0x40	; 64
 2ec:	f9 07       	cpc	r31, r25
 2ee:	c1 f7       	brne	.-16     	; 0x2e0 <Msg+0x68>
 2f0:	1f c0       	rjmp	.+62     	; 0x330 <Msg+0xb8>
        }
        else if (Message==STATE_WAS_INTERUPTED)
        {
            SetAllRGB(255,255,255);
        }
        else if(Message<6)
 2f2:	86 30       	cpi	r24, 0x06	; 6
 2f4:	e8 f4       	brcc	.+58     	; 0x330 <Msg+0xb8>
 2f6:	e0 e1       	ldi	r30, 0x10	; 16
 2f8:	f1 e0       	ldi	r31, 0x01	; 1
    else            return ((uint8_t)v);
}

void SetRGB(U8 LedNum, U8 _R, U8 _G, U8 _B)
{
    LEDs[LedNum].c.R = _R;
 2fa:	10 82       	st	Z, r1
    LEDs[LedNum].c.G = _G;
 2fc:	11 82       	std	Z+1, r1	; 0x01
    LEDs[LedNum].c.B = _B;
 2fe:	12 82       	std	Z+2, r1	; 0x02
 300:	38 96       	adiw	r30, 0x08	; 8
}

void SetAllRGB(U8 R, U8 G, U8 B)
{
    for(U8 i=0;i<NBLED;i++)
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	e0 34       	cpi	r30, 0x40	; 64
 306:	f8 07       	cpc	r31, r24
 308:	c1 f7       	brne	.-16     	; 0x2fa <Msg+0x82>
            SetAllRGB(255,255,255);
        }
        else if(Message<6)
        {
            SetAllRGB(0,0,0);
            SetRGB(State,0,255,0);
 30a:	80 91 08 01 	lds	r24, 0x0108
    else            return ((uint8_t)v);
}

void SetRGB(U8 LedNum, U8 _R, U8 _G, U8 _B)
{
    LEDs[LedNum].c.R = _R;
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	f0 97       	sbiw	r30, 0x30	; 48
 312:	73 e0       	ldi	r23, 0x03	; 3
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	7a 95       	dec	r23
 31a:	e1 f7       	brne	.-8      	; 0x314 <Msg+0x9c>
 31c:	df 01       	movw	r26, r30
 31e:	a8 0f       	add	r26, r24
 320:	b9 1f       	adc	r27, r25
 322:	1c 92       	st	X, r1
    LEDs[LedNum].c.G = _G;
 324:	2f ef       	ldi	r18, 0xFF	; 255
 326:	11 96       	adiw	r26, 0x01	; 1
 328:	2c 93       	st	X, r18
    LEDs[LedNum].c.B = _B;
 32a:	e8 0f       	add	r30, r24
 32c:	f9 1f       	adc	r31, r25
 32e:	12 82       	std	Z+2, r1	; 0x02
        {
            SetAllRGB(0,0,0);
            SetRGB(State,0,255,0);
        }

        TransferToPWM();
 330:	5e df       	rcall	.-324    	; 0x1ee <TransferToPWM>
 332:	88 e8       	ldi	r24, 0x88	; 136
 334:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 336:	20 e9       	ldi	r18, 0x90	; 144
 338:	31 e0       	ldi	r19, 0x01	; 1
 33a:	f9 01       	movw	r30, r18
 33c:	31 97       	sbiw	r30, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <Msg+0xc4>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 340:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 342:	d9 f7       	brne	.-10     	; 0x33a <Msg+0xc2>
        _delay_ms(500);
        Message=STATE_NULL;
 344:	10 92 07 01 	sts	0x0107, r1
 348:	08 95       	ret

0000034a <Test>:
//////////////////////////////////////////////////////
//Interupts
//////////////////////////////////////////////////////
void Test()
{
    PWM_AllOff();
 34a:	66 d2       	rcall	.+1228   	; 0x818 <PWM_AllOff>
    PORTD=0b00000000;
 34c:	1b b8       	out	0x0b, r1	; 11
 34e:	84 ec       	ldi	r24, 0xC4	; 196
 350:	99 e0       	ldi	r25, 0x09	; 9
 352:	20 e9       	ldi	r18, 0x90	; 144
 354:	31 e0       	ldi	r19, 0x01	; 1
 356:	f9 01       	movw	r30, r18
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <Test+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 35c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 35e:	d9 f7       	brne	.-10     	; 0x356 <Test+0xc>
    _delay_ms(250);
    PWM_AllOff();
 360:	5b d2       	rcall	.+1206   	; 0x818 <PWM_AllOff>
}
 362:	08 95       	ret

00000364 <RandomEffect>:
    //Mode 1 = flash
    //Mode 2 = fade in / fade out
    //Mode 3 = Command, set yourself to random pattern


    aCurrentEffect[5]               = (rand()%2)+1;            //Mode
 364:	4f d4       	rcall	.+2206   	; 0xc04 <rand>
 366:	62 e0       	ldi	r22, 0x02	; 2
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	ef d3       	rcall	.+2014   	; 0xb4a <__divmodhi4>
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	80 93 0e 01 	sts	0x010E, r24
    aCurrentEffect[0]++;                            //MsgNumber
 372:	80 91 09 01 	lds	r24, 0x0109
 376:	8f 5f       	subi	r24, 0xFF	; 255
 378:	80 93 09 01 	sts	0x0109, r24
	aCurrentEffect[1]               = rand();       //Hue
 37c:	43 d4       	rcall	.+2182   	; 0xc04 <rand>
 37e:	80 93 0a 01 	sts	0x010A, r24
	aCurrentEffect[2]               = 127;          //Brightness
 382:	8f e7       	ldi	r24, 0x7F	; 127
 384:	80 93 0b 01 	sts	0x010B, r24
	aCurrentEffect[3]               = rand()%100;   //ColorRange
 388:	3d d4       	rcall	.+2170   	; 0xc04 <rand>
 38a:	64 e6       	ldi	r22, 0x64	; 100
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	dd d3       	rcall	.+1978   	; 0xb4a <__divmodhi4>
 390:	80 93 0c 01 	sts	0x010C, r24
	aCurrentEffect[4]               = 2+rand()%100;  //CycleDuration
 394:	37 d4       	rcall	.+2158   	; 0xc04 <rand>
 396:	64 e6       	ldi	r22, 0x64	; 100
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	d7 d3       	rcall	.+1966   	; 0xb4a <__divmodhi4>
 39c:	8e 5f       	subi	r24, 0xFE	; 254
 39e:	80 93 0d 01 	sts	0x010D, r24

	if(aCurrentEffect[5]==1)
 3a2:	80 91 0e 01 	lds	r24, 0x010E
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	31 f4       	brne	.+12     	; 0x3b6 <RandomEffect+0x52>
        aCurrentEffect[4]               = 2+rand()%10;       //Delay
 3aa:	2c d4       	rcall	.+2136   	; 0xc04 <rand>
 3ac:	6a e0       	ldi	r22, 0x0A	; 10
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	cc d3       	rcall	.+1944   	; 0xb4a <__divmodhi4>
 3b2:	8e 5f       	subi	r24, 0xFE	; 254
 3b4:	07 c0       	rjmp	.+14     	; 0x3c4 <RandomEffect+0x60>
	else if (aCurrentEffect[5]==2)
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	39 f4       	brne	.+14     	; 0x3c8 <RandomEffect+0x64>
        aCurrentEffect[4]               = 30+rand()%50;       //Delay
 3ba:	24 d4       	rcall	.+2120   	; 0xc04 <rand>
 3bc:	62 e3       	ldi	r22, 0x32	; 50
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	c4 d3       	rcall	.+1928   	; 0xb4a <__divmodhi4>
 3c2:	82 5e       	subi	r24, 0xE2	; 226
 3c4:	80 93 0d 01 	sts	0x010D, r24

//aCurrentEffect[4]  =100;
    aCurrentEffect[6]=(rand()%30) +2;
 3c8:	1d d4       	rcall	.+2106   	; 0xc04 <rand>
 3ca:	6e e1       	ldi	r22, 0x1E	; 30
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	bd d3       	rcall	.+1914   	; 0xb4a <__divmodhi4>
 3d0:	8e 5f       	subi	r24, 0xFE	; 254
 3d2:	80 93 0f 01 	sts	0x010F, r24
//aCurrentEffect[6]=100;


	SendDelay=aCurrentEffect[6];
 3d6:	80 93 06 01 	sts	0x0106, r24

}
 3da:	08 95       	ret

000003dc <setup>:
//////////////////////////////////////////////////////
void setup()
{
    //Enabling interupts on reading pins PA0 & PB7

    UART_AllEars();
 3dc:	a2 d2       	rcall	.+1348   	; 0x922 <UART_AllEars>

        //UART_ENABLE_LISTEN();


    DDRA    |=0b00001110;
 3de:	8d b1       	in	r24, 0x0d	; 13
 3e0:	8e 60       	ori	r24, 0x0E	; 14
 3e2:	8d b9       	out	0x0d, r24	; 13
    DDRD    |=0b11111111;
 3e4:	8a b1       	in	r24, 0x0a	; 10
 3e6:	8f ef       	ldi	r24, 0xFF	; 255
 3e8:	8a b9       	out	0x0a, r24	; 10
    DDRC    |=0b11111111;
 3ea:	97 b1       	in	r25, 0x07	; 7
 3ec:	87 b9       	out	0x07, r24	; 7

//POWER REDUCTION
    PRR |=0b10001101;
 3ee:	e4 e6       	ldi	r30, 0x64	; 100
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	8d 68       	ori	r24, 0x8D	; 141
 3f6:	80 83       	st	Z, r24
//Turning off the watchdog
    WDTCSR&=0b10110111;
 3f8:	e0 e6       	ldi	r30, 0x60	; 96
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	87 7b       	andi	r24, 0xB7	; 183
 400:	80 83       	st	Z, r24
    PWM_init();
 402:	21 d2       	rcall	.+1090   	; 0x846 <PWM_init>

}
 404:	08 95       	ret

00000406 <ReceiveEffect>:
    sei();

}

void ReceiveEffect(volatile uint8_t *PINX, uint8_t PinNum)
{
 406:	bf 92       	push	r11
 408:	cf 92       	push	r12
 40a:	df 92       	push	r13
 40c:	ef 92       	push	r14
 40e:	ff 92       	push	r15
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	df 93       	push	r29
 416:	cf 93       	push	r28
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
 41c:	27 97       	sbiw	r28, 0x07	; 7
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	f8 94       	cli
 422:	de bf       	out	0x3e, r29	; 62
 424:	0f be       	out	0x3f, r0	; 63
 426:	cd bf       	out	0x3d, r28	; 61
 428:	7c 01       	movw	r14, r24
 42a:	b6 2e       	mov	r11, r22
 42c:	8e 01       	movw	r16, r28
 42e:	0f 5f       	subi	r16, 0xFF	; 255
 430:	1f 4f       	sbci	r17, 0xFF	; 255

    uint8_t tmpEffect[NB_EFFECT_PARAMS];

    for(uint8_t i=0; i<NB_EFFECT_PARAMS;i++)
 432:	e8 e0       	ldi	r30, 0x08	; 8
 434:	ce 2e       	mov	r12, r30
 436:	d1 2c       	mov	r13, r1
 438:	cc 0e       	add	r12, r28
 43a:	dd 1e       	adc	r13, r29
        tmpEffect[i] = UART_ReadByte(PINX, PinNum);
 43c:	c7 01       	movw	r24, r14
 43e:	6b 2d       	mov	r22, r11
 440:	f2 d2       	rcall	.+1508   	; 0xa26 <UART_ReadByte>
 442:	f8 01       	movw	r30, r16
 444:	81 93       	st	Z+, r24
 446:	8f 01       	movw	r16, r30
void ReceiveEffect(volatile uint8_t *PINX, uint8_t PinNum)
{

    uint8_t tmpEffect[NB_EFFECT_PARAMS];

    for(uint8_t i=0; i<NB_EFFECT_PARAMS;i++)
 448:	ec 15       	cp	r30, r12
 44a:	fd 05       	cpc	r31, r13
 44c:	b9 f7       	brne	.-18     	; 0x43c <ReceiveEffect+0x36>
        tmpEffect[i] = UART_ReadByte(PINX, PinNum);

    uint8_t errorFlag = 0;

    uint8_t crc = UART_ReadByte(PINX, PinNum);
 44e:	c7 01       	movw	r24, r14
 450:	6b 2d       	mov	r22, r11
 452:	e9 d2       	rcall	.+1490   	; 0xa26 <UART_ReadByte>
 454:	08 2f       	mov	r16, r24
    if (crc != UART_CheckCRC(tmpEffect)) errorFlag=1;
 456:	7e 01       	movw	r14, r28
 458:	08 94       	sec
 45a:	e1 1c       	adc	r14, r1
 45c:	f1 1c       	adc	r15, r1
 45e:	c7 01       	movw	r24, r14
 460:	2b d3       	rcall	.+1622   	; 0xab8 <UART_CheckCRC>
 462:	10 e0       	ldi	r17, 0x00	; 0
 464:	08 17       	cp	r16, r24
 466:	19 07       	cpc	r17, r25
 468:	e1 f4       	brne	.+56     	; 0x4a2 <ReceiveEffect+0x9c>


    if(errorFlag==0)
    {
        if(aCurrentEffect[0]!=tmpEffect[0])
 46a:	90 91 09 01 	lds	r25, 0x0109
 46e:	89 81       	ldd	r24, Y+1	; 0x01
 470:	98 17       	cp	r25, r24
 472:	b9 f0       	breq	.+46     	; 0x4a2 <ReceiveEffect+0x9c>
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
        {
            for(uint8_t i=0; i<NB_EFFECT_PARAMS;i++)
                aCurrentEffect[i]=tmpEffect[i];
 478:	a7 01       	movw	r20, r14
 47a:	f9 01       	movw	r30, r18
 47c:	e7 5f       	subi	r30, 0xF7	; 247
 47e:	fe 4f       	sbci	r31, 0xFE	; 254
 480:	da 01       	movw	r26, r20
 482:	a2 0f       	add	r26, r18
 484:	b3 1f       	adc	r27, r19
 486:	8c 91       	ld	r24, X
 488:	80 83       	st	Z, r24
 48a:	2f 5f       	subi	r18, 0xFF	; 255
 48c:	3f 4f       	sbci	r19, 0xFF	; 255

    if(errorFlag==0)
    {
        if(aCurrentEffect[0]!=tmpEffect[0])
        {
            for(uint8_t i=0; i<NB_EFFECT_PARAMS;i++)
 48e:	27 30       	cpi	r18, 0x07	; 7
 490:	31 05       	cpc	r19, r1
 492:	99 f7       	brne	.-26     	; 0x47a <ReceiveEffect+0x74>
                aCurrentEffect[i]=tmpEffect[i];

            State=STATE_MSG_RECEIVED;
 494:	8c e0       	ldi	r24, 0x0C	; 12
 496:	80 93 08 01 	sts	0x0108, r24
            SendDelay=aCurrentEffect[6];
 49a:	80 91 0f 01 	lds	r24, 0x010F
 49e:	80 93 06 01 	sts	0x0106, r24
        //else Message=STATE_OLD_MSG_RECEIVED;
    }
    //else Message=STATE_BAD_MSG_RECEIVED;


}
 4a2:	27 96       	adiw	r28, 0x07	; 7
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	cf 91       	pop	r28
 4b0:	df 91       	pop	r29
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	ff 90       	pop	r15
 4b8:	ef 90       	pop	r14
 4ba:	df 90       	pop	r13
 4bc:	cf 90       	pop	r12
 4be:	bf 90       	pop	r11
 4c0:	08 95       	ret

000004c2 <TreatInterupt>:
    _delay_ms(250);
    PWM_AllOff();
}

void TreatInterupt(volatile uint8_t *PINX, uint8_t PinNum)
{
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	ec 01       	movw	r28, r24
 4ca:	16 2f       	mov	r17, r22


    cli();
 4cc:	f8 94       	cli
    PWM_AllOff();
 4ce:	a4 d1       	rcall	.+840    	; 0x818 <PWM_AllOff>

    //while((PINB & _BV(7)) ==0){}

    uint8_t UartByte = UART_ReadByte(PINX, PinNum);
 4d0:	ce 01       	movw	r24, r28
 4d2:	61 2f       	mov	r22, r17
 4d4:	a8 d2       	rcall	.+1360   	; 0xa26 <UART_ReadByte>

    if (UartByte==START_TRANS_BYTE)
 4d6:	8a 3a       	cpi	r24, 0xAA	; 170
 4d8:	21 f4       	brne	.+8      	; 0x4e2 <TreatInterupt+0x20>
    {
        ReceiveEffect(PINX, PinNum);
 4da:	ce 01       	movw	r24, r28
 4dc:	61 2f       	mov	r22, r17
 4de:	93 df       	rcall	.-218    	; 0x406 <ReceiveEffect>
 4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <TreatInterupt+0x2e>
    }
    else if(UartByte==0)
 4e2:	88 23       	and	r24, r24
 4e4:	29 f4       	brne	.+10     	; 0x4f0 <TreatInterupt+0x2e>
    {
        if(PinNum==7)
 4e6:	17 30       	cpi	r17, 0x07	; 7
 4e8:	19 f4       	brne	.+6      	; 0x4f0 <TreatInterupt+0x2e>
        {
            State=STATE_BUTTON_PUSHED;//Someone hit the button
 4ea:	8b e0       	ldi	r24, 0x0B	; 11
 4ec:	80 93 08 01 	sts	0x0108, r24
    }
    //else Message=STATE_BAD_MSG_RECEIVED;

    //Message=STATE_WAS_INTERUPTED;

    sei();
 4f0:	78 94       	sei
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	08 95       	ret

000004fa <__vector_6>:
    else if((PINB & _BV(2))==0)
        TreatInterupt(&PINB, 2);
}

ISR(PCINT3_vect)
{
 4fa:	1f 92       	push	r1
 4fc:	0f 92       	push	r0
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	0f 92       	push	r0
 502:	11 24       	eor	r1, r1
 504:	2f 93       	push	r18
 506:	3f 93       	push	r19
 508:	4f 93       	push	r20
 50a:	5f 93       	push	r21
 50c:	6f 93       	push	r22
 50e:	7f 93       	push	r23
 510:	8f 93       	push	r24
 512:	9f 93       	push	r25
 514:	af 93       	push	r26
 516:	bf 93       	push	r27
 518:	ef 93       	push	r30
 51a:	ff 93       	push	r31

    if((PINA & _BV(0))==0)
 51c:	60 99       	sbic	0x0c, 0	; 12
 51e:	04 c0       	rjmp	.+8      	; 0x528 <__vector_6+0x2e>
        TreatInterupt(&PINA, 0);
 520:	8c e2       	ldi	r24, 0x2C	; 44
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	cd df       	rcall	.-102    	; 0x4c2 <TreatInterupt>
}
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <__vector_3>:

    sei();
}

ISR(PCINT0_vect)
{
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	2f 93       	push	r18
 556:	3f 93       	push	r19
 558:	4f 93       	push	r20
 55a:	5f 93       	push	r21
 55c:	6f 93       	push	r22
 55e:	7f 93       	push	r23
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	af 93       	push	r26
 566:	bf 93       	push	r27
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
    if((PINB & _BV(7))== 0)
 56c:	1f 99       	sbic	0x03, 7	; 3
 56e:	04 c0       	rjmp	.+8      	; 0x578 <__vector_3+0x2e>
         TreatInterupt(&PINB, 7);
 570:	83 e2       	ldi	r24, 0x23	; 35
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	67 e0       	ldi	r22, 0x07	; 7
 576:	0b c0       	rjmp	.+22     	; 0x58e <__vector_3+0x44>
    else if((PINB & _BV(1))==0)
 578:	19 99       	sbic	0x03, 1	; 3
 57a:	04 c0       	rjmp	.+8      	; 0x584 <__vector_3+0x3a>
        TreatInterupt(&PINB, 1);
 57c:	83 e2       	ldi	r24, 0x23	; 35
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	61 e0       	ldi	r22, 0x01	; 1
 582:	05 c0       	rjmp	.+10     	; 0x58e <__vector_3+0x44>
    else if((PINB & _BV(2))==0)
 584:	1a 99       	sbic	0x03, 2	; 3
 586:	04 c0       	rjmp	.+8      	; 0x590 <__vector_3+0x46>
        TreatInterupt(&PINB, 2);
 588:	83 e2       	ldi	r24, 0x23	; 35
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	62 e0       	ldi	r22, 0x02	; 2
 58e:	99 df       	rcall	.-206    	; 0x4c2 <TreatInterupt>
}
 590:	ff 91       	pop	r31
 592:	ef 91       	pop	r30
 594:	bf 91       	pop	r27
 596:	af 91       	pop	r26
 598:	9f 91       	pop	r25
 59a:	8f 91       	pop	r24
 59c:	7f 91       	pop	r23
 59e:	6f 91       	pop	r22
 5a0:	5f 91       	pop	r21
 5a2:	4f 91       	pop	r20
 5a4:	3f 91       	pop	r19
 5a6:	2f 91       	pop	r18
 5a8:	0f 90       	pop	r0
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	0f 90       	pop	r0
 5ae:	1f 90       	pop	r1
 5b0:	18 95       	reti

000005b2 <SendEffect>:
	SendDelay=aCurrentEffect[6];

}

void SendEffect()
{
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
    //This is to indicate that a message is coming
    cli();
 5b6:	f8 94       	cli
    UART_AllOut();
 5b8:	cc d1       	rcall	.+920    	; 0x952 <UART_AllOut>


    //UART_Push0();
    //UART_Push1();

    UART_SendByte(START_TRANS_BYTE);
 5ba:	8a ea       	ldi	r24, 0xAA	; 170
 5bc:	f4 d1       	rcall	.+1000   	; 0x9a6 <UART_SendByte>
 5be:	c9 e0       	ldi	r28, 0x09	; 9
 5c0:	d1 e0       	ldi	r29, 0x01	; 1

    for(uint8_t i=0; i<NB_EFFECT_PARAMS;i++)
        UART_SendByte(aCurrentEffect[i]);
 5c2:	89 91       	ld	r24, Y+
 5c4:	f0 d1       	rcall	.+992    	; 0x9a6 <UART_SendByte>
    //UART_Push0();
    //UART_Push1();

    UART_SendByte(START_TRANS_BYTE);

    for(uint8_t i=0; i<NB_EFFECT_PARAMS;i++)
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	c0 31       	cpi	r28, 0x10	; 16
 5ca:	d8 07       	cpc	r29, r24
 5cc:	d1 f7       	brne	.-12     	; 0x5c2 <SendEffect+0x10>
        UART_SendByte(aCurrentEffect[i]);

    UART_SendByte(UART_CheckCRC(aCurrentEffect));
 5ce:	ce 01       	movw	r24, r28
 5d0:	07 97       	sbiw	r24, 0x07	; 7
 5d2:	72 d2       	rcall	.+1252   	; 0xab8 <UART_CheckCRC>
 5d4:	e8 d1       	rcall	.+976    	; 0x9a6 <UART_SendByte>

    //UartDelay=(int)aCurrentEffect[6]+((int)aCurrentEffect[6]/2);
    UartDelay=((int)aCurrentEffect[6]) * 3;
 5d6:	80 91 0f 01 	lds	r24, 0x010F
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	63 e0       	ldi	r22, 0x03	; 3
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	82 d2       	rcall	.+1284   	; 0xae6 <__mulhi3>
 5e2:	90 93 05 01 	sts	0x0105, r25
 5e6:	80 93 04 01 	sts	0x0104, r24
    sei();
 5ea:	78 94       	sei

}
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	08 95       	ret

000005f2 <main>:
    WDTCSR&=0b10110111;
    PWM_init();

}
int main(void)
{
 5f2:	bf 92       	push	r11
 5f4:	cf 92       	push	r12
 5f6:	df 92       	push	r13
 5f8:	ef 92       	push	r14
 5fa:	ff 92       	push	r15
 5fc:	0f 93       	push	r16
 5fe:	1f 93       	push	r17
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
    setup();
 604:	eb de       	rcall	.-554    	; 0x3dc <setup>
    RandomEffect();
 606:	ae de       	rcall	.-676    	; 0x364 <RandomEffect>
    sei();
 608:	78 94       	sei

    Message=1;
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	80 93 07 01 	sts	0x0107, r24
            //Someone Pushed the button
            srand(TCNT0);
            RandomEffect();
            //for(int i=0;i<10;i++)

            State=STATE_MSG_RECEIVED;
 610:	1c e0       	ldi	r17, 0x0C	; 12
 612:	b1 2e       	mov	r11, r17
 614:	b0 e2       	ldi	r27, 0x20	; 32
 616:	cb 2e       	mov	r12, r27
 618:	be e4       	ldi	r27, 0x4E	; 78
 61a:	db 2e       	mov	r13, r27

    U8 i=0;

    while(1)
    {
        Msg();
 61c:	2d de       	rcall	.-934    	; 0x278 <Msg>

        if(UartDelay>0)
 61e:	80 91 04 01 	lds	r24, 0x0104
 622:	90 91 05 01 	lds	r25, 0x0105
 626:	18 16       	cp	r1, r24
 628:	19 06       	cpc	r1, r25
 62a:	34 f4       	brge	.+12     	; 0x638 <main+0x46>
            UartDelay--;
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	90 93 05 01 	sts	0x0105, r25
 632:	80 93 04 01 	sts	0x0104, r24
 636:	01 c0       	rjmp	.+2      	; 0x63a <main+0x48>
        else UART_AllEars();
 638:	74 d1       	rcall	.+744    	; 0x922 <UART_AllEars>

        if(State==STATE_BUTTON_PUSHED)
 63a:	80 91 08 01 	lds	r24, 0x0108
 63e:	8b 30       	cpi	r24, 0x0B	; 11
 640:	59 f4       	brne	.+22     	; 0x658 <main+0x66>
        {
            //Someone Pushed the button
            srand(TCNT0);
 642:	86 b5       	in	r24, 0x26	; 38
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	e2 d2       	rcall	.+1476   	; 0xc0c <srand>
            RandomEffect();
 648:	8d de       	rcall	.-742    	; 0x364 <RandomEffect>
            //for(int i=0;i<10;i++)

            State=STATE_MSG_RECEIVED;
 64a:	b0 92 08 01 	sts	0x0108, r11
 64e:	c0 e1       	ldi	r28, 0x10	; 16
 650:	d1 e0       	ldi	r29, 0x01	; 1
 652:	ee 24       	eor	r14, r14
 654:	ff 24       	eor	r15, r15
 656:	10 c0       	rjmp	.+32     	; 0x678 <main+0x86>
        }
        else if(State==STATE_MSG_RECEIVED)
 658:	80 91 08 01 	lds	r24, 0x0108
 65c:	8c 30       	cpi	r24, 0x0C	; 12
 65e:	b9 f7       	brne	.-18     	; 0x64e <main+0x5c>
        {
            if(SendDelay==0)
 660:	80 91 06 01 	lds	r24, 0x0106
 664:	88 23       	and	r24, r24
 666:	21 f4       	brne	.+8      	; 0x670 <main+0x7e>
            {
                SendEffect();
 668:	a4 df       	rcall	.-184    	; 0x5b2 <SendEffect>
                State=STATE_NULL;
 66a:	10 92 08 01 	sts	0x0108, r1
 66e:	ef cf       	rjmp	.-34     	; 0x64e <main+0x5c>
            }
            else
                SendDelay--;
 670:	81 50       	subi	r24, 0x01	; 1
 672:	80 93 06 01 	sts	0x0106, r24
 676:	eb cf       	rjmp	.-42     	; 0x64e <main+0x5c>
        }

        for(i=0;i<NBLED;i++)
        {
            if(aCurrentEffect[5]==1)
 678:	80 91 0e 01 	lds	r24, 0x010E
 67c:	81 30       	cpi	r24, 0x01	; 1
 67e:	89 f4       	brne	.+34     	; 0x6a2 <main+0xb0>
            {
                if(LEDs[i].CyclePosition >= (LEDs[i].CycleDuration/4))
 680:	8f 81       	ldd	r24, Y+7	; 0x07
 682:	86 95       	lsr	r24
 684:	86 95       	lsr	r24
 686:	9e 81       	ldd	r25, Y+6	; 0x06
 688:	98 17       	cp	r25, r24
 68a:	20 f0       	brcs	.+8      	; 0x694 <main+0xa2>
    else            return ((uint8_t)v);
}

void SetRGB(U8 LedNum, U8 _R, U8 _G, U8 _B)
{
    LEDs[LedNum].c.R = _R;
 68c:	18 82       	st	Y, r1
    LEDs[LedNum].c.G = _G;
 68e:	19 82       	std	Y+1, r1	; 0x01
    LEDs[LedNum].c.B = _B;
 690:	1a 82       	std	Y+2, r1	; 0x02
 692:	28 c0       	rjmp	.+80     	; 0x6e4 <main+0xf2>
    return c;
}

void MatchColor(Color *Source, Color *Destination)
{
    (*Destination).R = (*Source).R;
 694:	8b 81       	ldd	r24, Y+3	; 0x03
 696:	88 83       	st	Y, r24
    (*Destination).G = (*Source).G;
 698:	8c 81       	ldd	r24, Y+4	; 0x04
 69a:	89 83       	std	Y+1, r24	; 0x01
    (*Destination).B = (*Source).B;
 69c:	8d 81       	ldd	r24, Y+5	; 0x05
 69e:	8a 83       	std	Y+2, r24	; 0x02
 6a0:	21 c0       	rjmp	.+66     	; 0x6e4 <main+0xf2>
                    SetRGB(i,0,0,0);
                else

                    MatchColor(&LEDs[i].BaseColor, &LEDs[i].c);
            }
            else if(aCurrentEffect[5]==2)
 6a2:	82 30       	cpi	r24, 0x02	; 2
 6a4:	f9 f4       	brne	.+62     	; 0x6e4 <main+0xf2>
            {
                uint8_t HalfCycleDuration = LEDs[i].CycleDuration/2;
 6a6:	0f 81       	ldd	r16, Y+7	; 0x07
 6a8:	06 95       	lsr	r16
                if(LEDs[i].CyclePosition<LEDs[i].CycleDuration/2)
 6aa:	3e 81       	ldd	r19, Y+6	; 0x06
 6ac:	b7 01       	movw	r22, r14
 6ae:	a3 e0       	ldi	r26, 0x03	; 3
 6b0:	66 0f       	add	r22, r22
 6b2:	77 1f       	adc	r23, r23
 6b4:	aa 95       	dec	r26
 6b6:	e1 f7       	brne	.-8      	; 0x6b0 <main+0xbe>
 6b8:	30 17       	cp	r19, r16
 6ba:	48 f4       	brcc	.+18     	; 0x6ce <main+0xdc>
                    ColorBetween(&LEDs[i].c, &LEDs[i].BaseColor, &cBlack, LEDs[i].CyclePosition, HalfCycleDuration);
 6bc:	cb 01       	movw	r24, r22
 6be:	80 5f       	subi	r24, 0xF0	; 240
 6c0:	9e 4f       	sbci	r25, 0xFE	; 254
 6c2:	6d 5e       	subi	r22, 0xED	; 237
 6c4:	7e 4f       	sbci	r23, 0xFE	; 254
 6c6:	4c e5       	ldi	r20, 0x5C	; 92
 6c8:	51 e0       	ldi	r21, 0x01	; 1
 6ca:	23 2f       	mov	r18, r19
 6cc:	0a c0       	rjmp	.+20     	; 0x6e2 <main+0xf0>
                else
                    ColorBetween(&LEDs[i].c, &LEDs[i].BaseColor, &cBlack, HalfCycleDuration - (LEDs[i].CyclePosition- HalfCycleDuration), HalfCycleDuration );
 6ce:	20 2f       	mov	r18, r16
 6d0:	22 0f       	add	r18, r18
 6d2:	23 1b       	sub	r18, r19
 6d4:	cb 01       	movw	r24, r22
 6d6:	80 5f       	subi	r24, 0xF0	; 240
 6d8:	9e 4f       	sbci	r25, 0xFE	; 254
 6da:	6d 5e       	subi	r22, 0xED	; 237
 6dc:	7e 4f       	sbci	r23, 0xFE	; 254
 6de:	4c e5       	ldi	r20, 0x5C	; 92
 6e0:	51 e0       	ldi	r21, 0x01	; 1
 6e2:	cc dc       	rcall	.-1640   	; 0x7c <ColorBetween>

            }
            LEDs[i].CyclePosition++;
 6e4:	8e 81       	ldd	r24, Y+6	; 0x06
 6e6:	8f 5f       	subi	r24, 0xFF	; 255
 6e8:	8e 83       	std	Y+6, r24	; 0x06
            if(LEDs[i].CyclePosition >= LEDs[i].CycleDuration)
 6ea:	9f 81       	ldd	r25, Y+7	; 0x07
 6ec:	89 17       	cp	r24, r25
 6ee:	e0 f0       	brcs	.+56     	; 0x728 <main+0x136>
            {
                    LEDs[i].CyclePosition = 0;
 6f0:	1e 82       	std	Y+6, r1	; 0x06
                    LEDs[i].CycleDuration = aCurrentEffect[4]/*CycleDuration*/+ (rand()%5);
 6f2:	10 91 0d 01 	lds	r17, 0x010D
 6f6:	86 d2       	rcall	.+1292   	; 0xc04 <rand>
 6f8:	65 e0       	ldi	r22, 0x05	; 5
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	26 d2       	rcall	.+1100   	; 0xb4a <__divmodhi4>
 6fe:	18 0f       	add	r17, r24
 700:	1f 83       	std	Y+7, r17	; 0x07
                    SetHue(&LEDs[i].BaseColor, aCurrentEffect[1]/*Hue*/+ (rand()%aCurrentEffect[3]/*ColorRange*/));
 702:	10 91 0a 01 	lds	r17, 0x010A
 706:	7e d2       	rcall	.+1276   	; 0xc04 <rand>
 708:	97 01       	movw	r18, r14
 70a:	f3 e0       	ldi	r31, 0x03	; 3
 70c:	22 0f       	add	r18, r18
 70e:	33 1f       	adc	r19, r19
 710:	fa 95       	dec	r31
 712:	e1 f7       	brne	.-8      	; 0x70c <main+0x11a>
 714:	60 91 0c 01 	lds	r22, 0x010C
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	17 d2       	rcall	.+1070   	; 0xb4a <__divmodhi4>
 71c:	18 0f       	add	r17, r24
 71e:	c9 01       	movw	r24, r18
 720:	8d 5e       	subi	r24, 0xED	; 237
 722:	9e 4f       	sbci	r25, 0xFE	; 254
 724:	61 2f       	mov	r22, r17
 726:	da dc       	rcall	.-1612   	; 0xdc <SetHue>
 728:	08 94       	sec
 72a:	e1 1c       	adc	r14, r1
 72c:	f1 1c       	adc	r15, r1
 72e:	28 96       	adiw	r28, 0x08	; 8
            }
            else
                SendDelay--;
        }

        for(i=0;i<NBLED;i++)
 730:	86 e0       	ldi	r24, 0x06	; 6
 732:	e8 16       	cp	r14, r24
 734:	f1 04       	cpc	r15, r1
 736:	09 f0       	breq	.+2      	; 0x73a <main+0x148>
 738:	9f cf       	rjmp	.-194    	; 0x678 <main+0x86>
                    LEDs[i].CyclePosition = 0;
                    LEDs[i].CycleDuration = aCurrentEffect[4]/*CycleDuration*/+ (rand()%5);
                    SetHue(&LEDs[i].BaseColor, aCurrentEffect[1]/*Hue*/+ (rand()%aCurrentEffect[3]/*ColorRange*/));
            }
        }
        TransferToPWM();
 73a:	59 dd       	rcall	.-1358   	; 0x1ee <TransferToPWM>
 73c:	c6 01       	movw	r24, r12
 73e:	01 97       	sbiw	r24, 0x01	; 1
 740:	f1 f7       	brne	.-4      	; 0x73e <main+0x14c>
 742:	6c cf       	rjmp	.-296    	; 0x61c <main+0x2a>

00000744 <PWM_SwitchPins>:
/***************************************
         INITIALIZE THE TIMER
***************************************/

void PWM_SwitchPins()
{
 744:	41 e0       	ldi	r20, 0x01	; 1
 746:	50 e0       	ldi	r21, 0x00	; 0
  uint8_t i;
  for (i=1; i<4;  i++)  if (PWM_pins[i]  > TCNT0) PORTA &= ~(1 << i); else PORTA |= (1 << i);
 748:	61 e0       	ldi	r22, 0x01	; 1
 74a:	70 e0       	ldi	r23, 0x00	; 0
 74c:	fa 01       	movw	r30, r20
 74e:	e0 5c       	subi	r30, 0xC0	; 192
 750:	fe 4f       	sbci	r31, 0xFE	; 254
 752:	90 81       	ld	r25, Z
 754:	86 b5       	in	r24, 0x26	; 38
 756:	89 17       	cp	r24, r25
 758:	60 f4       	brcc	.+24     	; 0x772 <PWM_SwitchPins+0x2e>
 75a:	2e b1       	in	r18, 0x0e	; 14
 75c:	cb 01       	movw	r24, r22
 75e:	04 2e       	mov	r0, r20
 760:	02 c0       	rjmp	.+4      	; 0x766 <PWM_SwitchPins+0x22>
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	0a 94       	dec	r0
 768:	e2 f7       	brpl	.-8      	; 0x762 <PWM_SwitchPins+0x1e>
 76a:	80 95       	com	r24
 76c:	82 23       	and	r24, r18
 76e:	8e b9       	out	0x0e, r24	; 14
 770:	0a c0       	rjmp	.+20     	; 0x786 <PWM_SwitchPins+0x42>
 772:	2e b1       	in	r18, 0x0e	; 14
 774:	cb 01       	movw	r24, r22
 776:	04 2e       	mov	r0, r20
 778:	02 c0       	rjmp	.+4      	; 0x77e <PWM_SwitchPins+0x3a>
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	0a 94       	dec	r0
 780:	e2 f7       	brpl	.-8      	; 0x77a <PWM_SwitchPins+0x36>
 782:	28 2b       	or	r18, r24
 784:	2e b9       	out	0x0e, r18	; 14
 786:	4f 5f       	subi	r20, 0xFF	; 255
 788:	5f 4f       	sbci	r21, 0xFF	; 255
 78a:	44 30       	cpi	r20, 0x04	; 4
 78c:	51 05       	cpc	r21, r1
 78e:	f1 f6       	brne	.-68     	; 0x74c <PWM_SwitchPins+0x8>
 790:	40 e0       	ldi	r20, 0x00	; 0
 792:	50 e0       	ldi	r21, 0x00	; 0
  for (i=0; i<8;  i++)
  {
    //if (PWM_pins[i+4]    > TCNT0) PORTB &= ~(1 << i); else PORTB |= (1 << i);
    if (PWM_pins[i+12]   > TCNT0) PORTC &= ~(1 << i); else PORTC |= (1 << i);
 794:	61 e0       	ldi	r22, 0x01	; 1
 796:	70 e0       	ldi	r23, 0x00	; 0
***************************************/

void PWM_SwitchPins()
{
  uint8_t i;
  for (i=1; i<4;  i++)  if (PWM_pins[i]  > TCNT0) PORTA &= ~(1 << i); else PORTA |= (1 << i);
 798:	34 2f       	mov	r19, r20
  for (i=0; i<8;  i++)
  {
    //if (PWM_pins[i+4]    > TCNT0) PORTB &= ~(1 << i); else PORTB |= (1 << i);
    if (PWM_pins[i+12]   > TCNT0) PORTC &= ~(1 << i); else PORTC |= (1 << i);
 79a:	fa 01       	movw	r30, r20
 79c:	e4 5b       	subi	r30, 0xB4	; 180
 79e:	fe 4f       	sbci	r31, 0xFE	; 254
 7a0:	90 81       	ld	r25, Z
 7a2:	86 b5       	in	r24, 0x26	; 38
 7a4:	89 17       	cp	r24, r25
 7a6:	60 f4       	brcc	.+24     	; 0x7c0 <PWM_SwitchPins+0x7c>
 7a8:	28 b1       	in	r18, 0x08	; 8
 7aa:	cb 01       	movw	r24, r22
 7ac:	04 2e       	mov	r0, r20
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <PWM_SwitchPins+0x70>
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	0a 94       	dec	r0
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <PWM_SwitchPins+0x6c>
 7b8:	80 95       	com	r24
 7ba:	82 23       	and	r24, r18
 7bc:	88 b9       	out	0x08, r24	; 8
 7be:	0a c0       	rjmp	.+20     	; 0x7d4 <PWM_SwitchPins+0x90>
 7c0:	28 b1       	in	r18, 0x08	; 8
 7c2:	cb 01       	movw	r24, r22
 7c4:	04 2e       	mov	r0, r20
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <PWM_SwitchPins+0x88>
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	0a 94       	dec	r0
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <PWM_SwitchPins+0x84>
 7d0:	28 2b       	or	r18, r24
 7d2:	28 b9       	out	0x08, r18	; 8
    if (PWM_pins[i+20]   > TCNT0) PORTD &= ~(1 << i); else PORTD |= (1 << i);
 7d4:	fa 01       	movw	r30, r20
 7d6:	ec 5a       	subi	r30, 0xAC	; 172
 7d8:	fe 4f       	sbci	r31, 0xFE	; 254
 7da:	90 81       	ld	r25, Z
 7dc:	86 b5       	in	r24, 0x26	; 38
 7de:	89 17       	cp	r24, r25
 7e0:	58 f4       	brcc	.+22     	; 0x7f8 <PWM_SwitchPins+0xb4>
 7e2:	2b b1       	in	r18, 0x0b	; 11
 7e4:	cb 01       	movw	r24, r22
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <PWM_SwitchPins+0xa8>
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	3a 95       	dec	r19
 7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <PWM_SwitchPins+0xa4>
 7f0:	80 95       	com	r24
 7f2:	82 23       	and	r24, r18
 7f4:	8b b9       	out	0x0b, r24	; 11
 7f6:	09 c0       	rjmp	.+18     	; 0x80a <PWM_SwitchPins+0xc6>
 7f8:	2b b1       	in	r18, 0x0b	; 11
 7fa:	cb 01       	movw	r24, r22
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <PWM_SwitchPins+0xbe>
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	3a 95       	dec	r19
 804:	e2 f7       	brpl	.-8      	; 0x7fe <PWM_SwitchPins+0xba>
 806:	28 2b       	or	r18, r24
 808:	2b b9       	out	0x0b, r18	; 11
 80a:	4f 5f       	subi	r20, 0xFF	; 255
 80c:	5f 4f       	sbci	r21, 0xFF	; 255

void PWM_SwitchPins()
{
  uint8_t i;
  for (i=1; i<4;  i++)  if (PWM_pins[i]  > TCNT0) PORTA &= ~(1 << i); else PORTA |= (1 << i);
  for (i=0; i<8;  i++)
 80e:	48 30       	cpi	r20, 0x08	; 8
 810:	51 05       	cpc	r21, r1
 812:	09 f0       	breq	.+2      	; 0x816 <PWM_SwitchPins+0xd2>
 814:	c1 cf       	rjmp	.-126    	; 0x798 <PWM_SwitchPins+0x54>
  {
    //if (PWM_pins[i+4]    > TCNT0) PORTB &= ~(1 << i); else PORTB |= (1 << i);
    if (PWM_pins[i+12]   > TCNT0) PORTC &= ~(1 << i); else PORTC |= (1 << i);
    if (PWM_pins[i+20]   > TCNT0) PORTD &= ~(1 << i); else PORTD |= (1 << i);
  }
}
 816:	08 95       	ret

00000818 <PWM_AllOff>:
void PWM_AllOff()
{
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	90 e0       	ldi	r25, 0x00	; 0
    for(uint8_t i=0;i<PWM_PINS_NUMBER;i++)
        PWM_pins[i]=0;
 81c:	fc 01       	movw	r30, r24
 81e:	e0 5c       	subi	r30, 0xC0	; 192
 820:	fe 4f       	sbci	r31, 0xFE	; 254
 822:	10 82       	st	Z, r1
 824:	01 96       	adiw	r24, 0x01	; 1
    if (PWM_pins[i+20]   > TCNT0) PORTD &= ~(1 << i); else PORTD |= (1 << i);
  }
}
void PWM_AllOff()
{
    for(uint8_t i=0;i<PWM_PINS_NUMBER;i++)
 826:	8c 31       	cpi	r24, 0x1C	; 28
 828:	91 05       	cpc	r25, r1
 82a:	c1 f7       	brne	.-16     	; 0x81c <PWM_AllOff+0x4>
        PWM_pins[i]=0;
    PWM_SwitchPins();
 82c:	8b df       	rcall	.-234    	; 0x744 <PWM_SwitchPins>
}
 82e:	08 95       	ret

00000830 <PWM_Reset>:
void PWM_Reset()
{
    PauseClock();
 830:	85 b5       	in	r24, 0x25	; 37
 832:	8b 7f       	andi	r24, 0xFB	; 251
 834:	85 bd       	out	0x25, r24	; 37

    TCNT0 = 0;
 836:	16 bc       	out	0x26, r1	; 38

    PWM_SwitchPins();
 838:	85 df       	rcall	.-246    	; 0x744 <PWM_SwitchPins>
    //FirstTick();

    OCR0A=1;
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	87 bd       	out	0x27, r24	; 39
    // reset timer value


    // timer 2 on
    ResumeClock();
 83e:	85 b5       	in	r24, 0x25	; 37
 840:	84 60       	ori	r24, 0x04	; 4
 842:	85 bd       	out	0x25, r24	; 37
}
 844:	08 95       	ret

00000846 <PWM_init>:

void PWM_init(void){
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	90 e0       	ldi	r25, 0x00	; 0

  for (uint8_t i=0; i<PWM_PINS_NUMBER; i++)PWM_pins[i]=0;
 84a:	fc 01       	movw	r30, r24
 84c:	e0 5c       	subi	r30, 0xC0	; 192
 84e:	fe 4f       	sbci	r31, 0xFE	; 254
 850:	10 82       	st	Z, r1
 852:	01 96       	adiw	r24, 0x01	; 1
 854:	8c 31       	cpi	r24, 0x1C	; 28
 856:	91 05       	cpc	r25, r1
 858:	c1 f7       	brne	.-16     	; 0x84a <PWM_init+0x4>

  PauseClock(); // timer off (turned on by PWM_set())
 85a:	85 b5       	in	r24, 0x25	; 37
 85c:	8b 7f       	andi	r24, 0xFB	; 251
 85e:	85 bd       	out	0x25, r24	; 37
  TIMSK0    |= 0b00000011;           // output compare match interrupt enable // overflow interrupt enable
 860:	80 91 6e 00 	lds	r24, 0x006E
 864:	83 60       	ori	r24, 0x03	; 3
 866:	80 93 6e 00 	sts	0x006E, r24
  //TIFR0     |= 0b00000011;
  OCR0A = 1;
 86a:	81 e0       	ldi	r24, 0x01	; 1
 86c:	87 bd       	out	0x27, r24	; 39
  TCNT0 = 0;
 86e:	16 bc       	out	0x26, r1	; 38
  ResumeClock();
 870:	85 b5       	in	r24, 0x25	; 37
 872:	84 60       	ori	r24, 0x04	; 4
 874:	85 bd       	out	0x25, r24	; 37
}
 876:	08 95       	ret

00000878 <PWM_set>:
/***************************************
     CHANGE THE DUTY CYCLE OF A PIN
***************************************/
void PWM_set(uint8_t PWM_pin, uint8_t PWM_duty_cycle){
  // set the new duty cycle in the pin array
  PWM_pins[PWM_pin] =  PWM_duty_cycle;
 878:	e0 e4       	ldi	r30, 0x40	; 64
 87a:	f1 e0       	ldi	r31, 0x01	; 1
 87c:	e8 0f       	add	r30, r24
 87e:	f1 1d       	adc	r31, r1
 880:	60 83       	st	Z, r22
}
 882:	08 95       	ret

00000884 <__vector_12>:

/***************************************
               INTERRUPTS
***************************************/

SIGNAL(TIMER0_COMPA_vect){
 884:	1f 92       	push	r1
 886:	0f 92       	push	r0
 888:	0f b6       	in	r0, 0x3f	; 63
 88a:	0f 92       	push	r0
 88c:	11 24       	eor	r1, r1
 88e:	2f 93       	push	r18
 890:	3f 93       	push	r19
 892:	4f 93       	push	r20
 894:	5f 93       	push	r21
 896:	6f 93       	push	r22
 898:	7f 93       	push	r23
 89a:	8f 93       	push	r24
 89c:	9f 93       	push	r25
 89e:	af 93       	push	r26
 8a0:	bf 93       	push	r27
 8a2:	ef 93       	push	r30
 8a4:	ff 93       	push	r31

    PauseClock();
 8a6:	85 b5       	in	r24, 0x25	; 37
 8a8:	8b 7f       	andi	r24, 0xFB	; 251
 8aa:	85 bd       	out	0x25, r24	; 37

    //MAX:
    PWM_SwitchPins();
 8ac:	4b df       	rcall	.-362    	; 0x744 <PWM_SwitchPins>
    //Tick();
    //PORTC &= ~(1 << i)
    //Increment to stop at next clock tick
    OCR0A+=8;
 8ae:	87 b5       	in	r24, 0x27	; 39
 8b0:	88 5f       	subi	r24, 0xF8	; 248
 8b2:	87 bd       	out	0x27, r24	; 39
    ResumeClock();
 8b4:	85 b5       	in	r24, 0x25	; 37
 8b6:	84 60       	ori	r24, 0x04	; 4
 8b8:	85 bd       	out	0x25, r24	; 37

}
 8ba:	ff 91       	pop	r31
 8bc:	ef 91       	pop	r30
 8be:	bf 91       	pop	r27
 8c0:	af 91       	pop	r26
 8c2:	9f 91       	pop	r25
 8c4:	8f 91       	pop	r24
 8c6:	7f 91       	pop	r23
 8c8:	6f 91       	pop	r22
 8ca:	5f 91       	pop	r21
 8cc:	4f 91       	pop	r20
 8ce:	3f 91       	pop	r19
 8d0:	2f 91       	pop	r18
 8d2:	0f 90       	pop	r0
 8d4:	0f be       	out	0x3f, r0	; 63
 8d6:	0f 90       	pop	r0
 8d8:	1f 90       	pop	r1
 8da:	18 95       	reti

000008dc <__vector_14>:

SIGNAL(TIMER0_OVF_vect ){
 8dc:	1f 92       	push	r1
 8de:	0f 92       	push	r0
 8e0:	0f b6       	in	r0, 0x3f	; 63
 8e2:	0f 92       	push	r0
 8e4:	11 24       	eor	r1, r1
 8e6:	2f 93       	push	r18
 8e8:	3f 93       	push	r19
 8ea:	4f 93       	push	r20
 8ec:	5f 93       	push	r21
 8ee:	6f 93       	push	r22
 8f0:	7f 93       	push	r23
 8f2:	8f 93       	push	r24
 8f4:	9f 93       	push	r25
 8f6:	af 93       	push	r26
 8f8:	bf 93       	push	r27
 8fa:	ef 93       	push	r30
 8fc:	ff 93       	push	r31
    //PulseOneBlue();//Debug
    PWM_Reset();
 8fe:	98 df       	rcall	.-208    	; 0x830 <PWM_Reset>

}
 900:	ff 91       	pop	r31
 902:	ef 91       	pop	r30
 904:	bf 91       	pop	r27
 906:	af 91       	pop	r26
 908:	9f 91       	pop	r25
 90a:	8f 91       	pop	r24
 90c:	7f 91       	pop	r23
 90e:	6f 91       	pop	r22
 910:	5f 91       	pop	r21
 912:	4f 91       	pop	r20
 914:	3f 91       	pop	r19
 916:	2f 91       	pop	r18
 918:	0f 90       	pop	r0
 91a:	0f be       	out	0x3f, r0	; 63
 91c:	0f 90       	pop	r0
 91e:	1f 90       	pop	r1
 920:	18 95       	reti

00000922 <UART_AllEars>:
//PA0 S3
//PB2 O6

void UART_AllEars()
{
    DDRB    &= ~PB_PINS;
 922:	84 b1       	in	r24, 0x04	; 4
 924:	89 77       	andi	r24, 0x79	; 121
 926:	84 b9       	out	0x04, r24	; 4
    PORTB   |=  PB_PINS;
 928:	85 b1       	in	r24, 0x05	; 5
 92a:	86 68       	ori	r24, 0x86	; 134
 92c:	85 b9       	out	0x05, r24	; 5
    PCMSK0  |=  PB_PINS;
 92e:	eb e6       	ldi	r30, 0x6B	; 107
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	80 81       	ld	r24, Z
 934:	86 68       	ori	r24, 0x86	; 134
 936:	80 83       	st	Z, r24

    DDRA    &= ~PA_PINS;
 938:	68 98       	cbi	0x0d, 0	; 13
    PORTA   |=  PA_PINS;
 93a:	70 9a       	sbi	0x0e, 0	; 14
    PCMSK3  |=  PA_PINS;
 93c:	ea e6       	ldi	r30, 0x6A	; 106
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	81 60       	ori	r24, 0x01	; 1
 944:	80 83       	st	Z, r24

    PCICR   |= 0b00001001;
 946:	e8 e6       	ldi	r30, 0x68	; 104
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	89 60       	ori	r24, 0x09	; 9
 94e:	80 83       	st	Z, r24
}
 950:	08 95       	ret

00000952 <UART_AllOut>:

void UART_AllOut()
{
    PCICR   &= 0b11110110;
 952:	e8 e6       	ldi	r30, 0x68	; 104
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	80 81       	ld	r24, Z
 958:	86 7f       	andi	r24, 0xF6	; 246
 95a:	80 83       	st	Z, r24

    PCMSK0  &= ~PB_PINS;
 95c:	eb e6       	ldi	r30, 0x6B	; 107
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	80 81       	ld	r24, Z
 962:	89 77       	andi	r24, 0x79	; 121
 964:	80 83       	st	Z, r24
    DDRB    |= PB_PINS;
 966:	84 b1       	in	r24, 0x04	; 4
 968:	86 68       	ori	r24, 0x86	; 134
 96a:	84 b9       	out	0x04, r24	; 4
    PORTB   |= PB_PINS;
 96c:	85 b1       	in	r24, 0x05	; 5
 96e:	86 68       	ori	r24, 0x86	; 134
 970:	85 b9       	out	0x05, r24	; 5

    PCMSK3  &= ~PA_PINS;
 972:	ea e6       	ldi	r30, 0x6A	; 106
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	80 81       	ld	r24, Z
 978:	8e 7f       	andi	r24, 0xFE	; 254
 97a:	80 83       	st	Z, r24
    DDRA    |= PA_PINS;
 97c:	68 9a       	sbi	0x0d, 0	; 13
    PORTA   |= PA_PINS;
 97e:	70 9a       	sbi	0x0e, 0	; 14
}
 980:	08 95       	ret

00000982 <UART_Push0>:

void UART_Push0()
{
    PORTA &= ~PA_PINS;
 982:	70 98       	cbi	0x0e, 0	; 14
    PORTB &= ~PB_PINS;
 984:	85 b1       	in	r24, 0x05	; 5
 986:	89 77       	andi	r24, 0x79	; 121
 988:	85 b9       	out	0x05, r24	; 5
 98a:	80 ed       	ldi	r24, 0xD0	; 208
 98c:	97 e0       	ldi	r25, 0x07	; 7
 98e:	01 97       	sbiw	r24, 0x01	; 1
 990:	f1 f7       	brne	.-4      	; 0x98e <UART_Push0+0xc>
    _delay_loop_2 (BIT_LENGHT);
}
 992:	08 95       	ret

00000994 <UART_Push1>:
void UART_Push1()
{
    PORTA |= PA_PINS;
 994:	70 9a       	sbi	0x0e, 0	; 14
    PORTB |= PB_PINS;
 996:	85 b1       	in	r24, 0x05	; 5
 998:	86 68       	ori	r24, 0x86	; 134
 99a:	85 b9       	out	0x05, r24	; 5
 99c:	80 ed       	ldi	r24, 0xD0	; 208
 99e:	97 e0       	ldi	r25, 0x07	; 7
 9a0:	01 97       	sbiw	r24, 0x01	; 1
 9a2:	f1 f7       	brne	.-4      	; 0x9a0 <UART_Push1+0xc>
    _delay_loop_2 (BIT_LENGHT);
}
 9a4:	08 95       	ret

000009a6 <UART_SendByte>:
    PORTA   |= PA_PINS;
}

void UART_Push0()
{
    PORTA &= ~PA_PINS;
 9a6:	70 98       	cbi	0x0e, 0	; 14
    PORTB &= ~PB_PINS;
 9a8:	95 b1       	in	r25, 0x05	; 5
 9aa:	99 77       	andi	r25, 0x79	; 121
 9ac:	95 b9       	out	0x05, r25	; 5
 9ae:	20 ed       	ldi	r18, 0xD0	; 208
 9b0:	37 e0       	ldi	r19, 0x07	; 7
 9b2:	f9 01       	movw	r30, r18
 9b4:	31 97       	sbiw	r30, 0x01	; 1
 9b6:	f1 f7       	brne	.-4      	; 0x9b4 <UART_SendByte+0xe>
    _delay_loop_2 (BIT_LENGHT);
}
void UART_Push1()
{
    PORTA |= PA_PINS;
 9b8:	70 9a       	sbi	0x0e, 0	; 14
    PORTB |= PB_PINS;
 9ba:	95 b1       	in	r25, 0x05	; 5
 9bc:	96 68       	ori	r25, 0x86	; 134
 9be:	95 b9       	out	0x05, r25	; 5
 9c0:	f9 01       	movw	r30, r18
 9c2:	31 97       	sbiw	r30, 0x01	; 1
 9c4:	f1 f7       	brne	.-4      	; 0x9c2 <UART_SendByte+0x1c>
 9c6:	20 e0       	ldi	r18, 0x00	; 0
 9c8:	30 e0       	ldi	r19, 0x00	; 0
    UART_Push0();
    UART_Push1();

    for(U8 i=0; i<8; i++)
    {
        if (byte >> i & 1)
 9ca:	48 2f       	mov	r20, r24
 9cc:	50 e0       	ldi	r21, 0x00	; 0
 9ce:	60 ed       	ldi	r22, 0xD0	; 208
 9d0:	77 e0       	ldi	r23, 0x07	; 7
 9d2:	ca 01       	movw	r24, r20
 9d4:	02 2e       	mov	r0, r18
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <UART_SendByte+0x36>
 9d8:	95 95       	asr	r25
 9da:	87 95       	ror	r24
 9dc:	0a 94       	dec	r0
 9de:	e2 f7       	brpl	.-8      	; 0x9d8 <UART_SendByte+0x32>
 9e0:	80 ff       	sbrs	r24, 0
 9e2:	04 c0       	rjmp	.+8      	; 0x9ec <UART_SendByte+0x46>
    PORTA   |= PA_PINS;
}

void UART_Push0()
{
    PORTA &= ~PA_PINS;
 9e4:	70 98       	cbi	0x0e, 0	; 14
    PORTB &= ~PB_PINS;
 9e6:	85 b1       	in	r24, 0x05	; 5
 9e8:	89 77       	andi	r24, 0x79	; 121
 9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <UART_SendByte+0x4c>
    _delay_loop_2 (BIT_LENGHT);
}
void UART_Push1()
{
    PORTA |= PA_PINS;
 9ec:	70 9a       	sbi	0x0e, 0	; 14
    PORTB |= PB_PINS;
 9ee:	85 b1       	in	r24, 0x05	; 5
 9f0:	86 68       	ori	r24, 0x86	; 134
 9f2:	85 b9       	out	0x05, r24	; 5
 9f4:	cb 01       	movw	r24, r22
 9f6:	01 97       	sbiw	r24, 0x01	; 1
 9f8:	f1 f7       	brne	.-4      	; 0x9f6 <UART_SendByte+0x50>
 9fa:	2f 5f       	subi	r18, 0xFF	; 255
 9fc:	3f 4f       	sbci	r19, 0xFF	; 255
void UART_SendByte(U8 byte)
{
    UART_Push0();
    UART_Push1();

    for(U8 i=0; i<8; i++)
 9fe:	28 30       	cpi	r18, 0x08	; 8
 a00:	31 05       	cpc	r19, r1
 a02:	39 f7       	brne	.-50     	; 0x9d2 <UART_SendByte+0x2c>
    PORTB &= ~PB_PINS;
    _delay_loop_2 (BIT_LENGHT);
}
void UART_Push1()
{
    PORTA |= PA_PINS;
 a04:	70 9a       	sbi	0x0e, 0	; 14
    PORTB |= PB_PINS;
 a06:	85 b1       	in	r24, 0x05	; 5
 a08:	86 68       	ori	r24, 0x86	; 134
 a0a:	85 b9       	out	0x05, r24	; 5
 a0c:	20 ed       	ldi	r18, 0xD0	; 208
 a0e:	37 e0       	ldi	r19, 0x07	; 7
 a10:	c9 01       	movw	r24, r18
 a12:	01 97       	sbiw	r24, 0x01	; 1
 a14:	f1 f7       	brne	.-4      	; 0xa12 <UART_SendByte+0x6c>
    PORTB &= ~PB_PINS;
    _delay_loop_2 (BIT_LENGHT);
}
void UART_Push1()
{
    PORTA |= PA_PINS;
 a16:	70 9a       	sbi	0x0e, 0	; 14
    PORTB |= PB_PINS;
 a18:	85 b1       	in	r24, 0x05	; 5
 a1a:	86 68       	ori	r24, 0x86	; 134
 a1c:	85 b9       	out	0x05, r24	; 5
 a1e:	c9 01       	movw	r24, r18
 a20:	01 97       	sbiw	r24, 0x01	; 1
 a22:	f1 f7       	brne	.-4      	; 0xa20 <UART_SendByte+0x7a>
        else
            UART_Push1();
    }
    UART_Push1();
    UART_Push1();
}
 a24:	08 95       	ret

00000a26 <UART_ReadByte>:
U8 UART_ReadByte(volatile uint8_t *PINX, uint8_t PinNum)
{
 a26:	0f 93       	push	r16
 a28:	1f 93       	push	r17
 a2a:	df 93       	push	r29
 a2c:	cf 93       	push	r28
 a2e:	0f 92       	push	r0
 a30:	cd b7       	in	r28, 0x3d	; 61
 a32:	de b7       	in	r29, 0x3e	; 62
 a34:	dc 01       	movw	r26, r24
    volatile U8 msg=0;
 a36:	19 82       	std	Y+1, r1	; 0x01
 a38:	e1 e0       	ldi	r30, 0x01	; 1
 a3a:	f0 e0       	ldi	r31, 0x00	; 0
 a3c:	02 c0       	rjmp	.+4      	; 0xa42 <UART_ReadByte+0x1c>
 a3e:	ee 0f       	add	r30, r30
 a40:	ff 1f       	adc	r31, r31
 a42:	6a 95       	dec	r22
 a44:	e2 f7       	brpl	.-8      	; 0xa3e <UART_ReadByte+0x18>
    //int ii=0;

    //while((*PINX & _BV(PinNum)) == 0 && ii<1000){ii++;_delay_loop_2 (1);}//Waiting for start pulse start
    //i=0;
    while((*PINX & _BV(PinNum)) !=0){}
 a46:	8c 91       	ld	r24, X
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	8e 23       	and	r24, r30
 a4c:	9f 23       	and	r25, r31
 a4e:	89 2b       	or	r24, r25
 a50:	d1 f7       	brne	.-12     	; 0xa46 <UART_ReadByte+0x20>
    while((*PINX & _BV(PinNum)) ==0){}//Waiting for start pulse end
 a52:	8c 91       	ld	r24, X
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	8e 23       	and	r24, r30
 a58:	9f 23       	and	r25, r31
 a5a:	89 2b       	or	r24, r25
 a5c:	d1 f3       	breq	.-12     	; 0xa52 <UART_ReadByte+0x2c>
 a5e:	80 ed       	ldi	r24, 0xD0	; 208
 a60:	97 e0       	ldi	r25, 0x07	; 7
 a62:	01 97       	sbiw	r24, 0x01	; 1
 a64:	f1 f7       	brne	.-4      	; 0xa62 <UART_ReadByte+0x3c>
 a66:	88 ee       	ldi	r24, 0xE8	; 232
 a68:	93 e0       	ldi	r25, 0x03	; 3
 a6a:	01 97       	sbiw	r24, 0x01	; 1
 a6c:	f1 f7       	brne	.-4      	; 0xa6a <UART_ReadByte+0x44>
 a6e:	40 e0       	ldi	r20, 0x00	; 0
 a70:	50 e0       	ldi	r21, 0x00	; 0
    _delay_loop_2 (HALF_BIT_LENGHT);//Delaying half a bit to sample in the middle of the bit lenght

    for(U8 i=0; i<8; i++)
    {
        if((*PINX & _BV(PinNum)) == 0)
            msg|= 1 << i;
 a72:	01 e0       	ldi	r16, 0x01	; 1
 a74:	10 e0       	ldi	r17, 0x00	; 0
 a76:	60 ed       	ldi	r22, 0xD0	; 208
 a78:	77 e0       	ldi	r23, 0x07	; 7
    _delay_loop_2 (BIT_LENGHT);
    _delay_loop_2 (HALF_BIT_LENGHT);//Delaying half a bit to sample in the middle of the bit lenght

    for(U8 i=0; i<8; i++)
    {
        if((*PINX & _BV(PinNum)) == 0)
 a7a:	8c 91       	ld	r24, X
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	8e 23       	and	r24, r30
 a80:	9f 23       	and	r25, r31
 a82:	89 2b       	or	r24, r25
 a84:	51 f4       	brne	.+20     	; 0xa9a <UART_ReadByte+0x74>
            msg|= 1 << i;
 a86:	29 81       	ldd	r18, Y+1	; 0x01
 a88:	c8 01       	movw	r24, r16
 a8a:	04 2e       	mov	r0, r20
 a8c:	02 c0       	rjmp	.+4      	; 0xa92 <UART_ReadByte+0x6c>
 a8e:	88 0f       	add	r24, r24
 a90:	99 1f       	adc	r25, r25
 a92:	0a 94       	dec	r0
 a94:	e2 f7       	brpl	.-8      	; 0xa8e <UART_ReadByte+0x68>
 a96:	28 2b       	or	r18, r24
 a98:	29 83       	std	Y+1, r18	; 0x01
 a9a:	cb 01       	movw	r24, r22
 a9c:	01 97       	sbiw	r24, 0x01	; 1
 a9e:	f1 f7       	brne	.-4      	; 0xa9c <UART_ReadByte+0x76>
 aa0:	4f 5f       	subi	r20, 0xFF	; 255
 aa2:	5f 4f       	sbci	r21, 0xFF	; 255


    _delay_loop_2 (BIT_LENGHT);
    _delay_loop_2 (HALF_BIT_LENGHT);//Delaying half a bit to sample in the middle of the bit lenght

    for(U8 i=0; i<8; i++)
 aa4:	48 30       	cpi	r20, 0x08	; 8
 aa6:	51 05       	cpc	r21, r1
 aa8:	41 f7       	brne	.-48     	; 0xa7a <UART_ReadByte+0x54>
    {
        if((*PINX & _BV(PinNum)) == 0)
            msg|= 1 << i;
        _delay_loop_2 (BIT_LENGHT);
    }
    return msg;
 aaa:	89 81       	ldd	r24, Y+1	; 0x01
}
 aac:	0f 90       	pop	r0
 aae:	cf 91       	pop	r28
 ab0:	df 91       	pop	r29
 ab2:	1f 91       	pop	r17
 ab4:	0f 91       	pop	r16
 ab6:	08 95       	ret

00000ab8 <UART_CheckCRC>:

uint8_t UART_CheckCRC(uint8_t MyArray[])
{
 ab8:	fc 01       	movw	r30, r24
 aba:	90 81       	ld	r25, Z
 abc:	80 e0       	ldi	r24, 0x00	; 0
 abe:	89 27       	eor	r24, r25
 ac0:	28 e0       	ldi	r18, 0x08	; 8
 ac2:	9c e8       	ldi	r25, 0x8C	; 140
 ac4:	80 fb       	bst	r24, 0
 ac6:	86 95       	lsr	r24
 ac8:	0e f4       	brtc	.+2      	; 0xacc <UART_CheckCRC+0x14>
 aca:	89 27       	eor	r24, r25
 acc:	2a 95       	dec	r18
 ace:	d1 f7       	brne	.-12     	; 0xac4 <UART_CheckCRC+0xc>
 ad0:	91 81       	ldd	r25, Z+1	; 0x01
        uint8_t crc = 0;
        for (uint8_t i = 0; i < sizeof MyArray ; i++)
            crc = _crc_ibutton_update(crc, MyArray[i]);

        return crc; // must be 0
}
 ad2:	89 27       	eor	r24, r25
 ad4:	98 e0       	ldi	r25, 0x08	; 8
 ad6:	2c e8       	ldi	r18, 0x8C	; 140
 ad8:	80 fb       	bst	r24, 0
 ada:	86 95       	lsr	r24
 adc:	0e f4       	brtc	.+2      	; 0xae0 <UART_CheckCRC+0x28>
 ade:	82 27       	eor	r24, r18
 ae0:	9a 95       	dec	r25
 ae2:	d1 f7       	brne	.-12     	; 0xad8 <UART_CheckCRC+0x20>
 ae4:	08 95       	ret

00000ae6 <__mulhi3>:
 ae6:	55 27       	eor	r21, r21
 ae8:	00 24       	eor	r0, r0

00000aea <__mulhi3_loop>:
 aea:	80 ff       	sbrs	r24, 0
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <__mulhi3_skip1>
 aee:	06 0e       	add	r0, r22
 af0:	57 1f       	adc	r21, r23

00000af2 <__mulhi3_skip1>:
 af2:	66 0f       	add	r22, r22
 af4:	77 1f       	adc	r23, r23
 af6:	61 15       	cp	r22, r1
 af8:	71 05       	cpc	r23, r1
 afa:	21 f0       	breq	.+8      	; 0xb04 <__mulhi3_exit>
 afc:	96 95       	lsr	r25
 afe:	87 95       	ror	r24
 b00:	00 97       	sbiw	r24, 0x00	; 0
 b02:	99 f7       	brne	.-26     	; 0xaea <__mulhi3_loop>

00000b04 <__mulhi3_exit>:
 b04:	95 2f       	mov	r25, r21
 b06:	80 2d       	mov	r24, r0
 b08:	08 95       	ret

00000b0a <__udivmodqi4>:
 b0a:	99 1b       	sub	r25, r25
 b0c:	79 e0       	ldi	r23, 0x09	; 9
 b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__udivmodqi4_ep>

00000b10 <__udivmodqi4_loop>:
 b10:	99 1f       	adc	r25, r25
 b12:	96 17       	cp	r25, r22
 b14:	08 f0       	brcs	.+2      	; 0xb18 <__udivmodqi4_ep>
 b16:	96 1b       	sub	r25, r22

00000b18 <__udivmodqi4_ep>:
 b18:	88 1f       	adc	r24, r24
 b1a:	7a 95       	dec	r23
 b1c:	c9 f7       	brne	.-14     	; 0xb10 <__udivmodqi4_loop>
 b1e:	80 95       	com	r24
 b20:	08 95       	ret

00000b22 <__udivmodhi4>:
 b22:	aa 1b       	sub	r26, r26
 b24:	bb 1b       	sub	r27, r27
 b26:	51 e1       	ldi	r21, 0x11	; 17
 b28:	07 c0       	rjmp	.+14     	; 0xb38 <__udivmodhi4_ep>

00000b2a <__udivmodhi4_loop>:
 b2a:	aa 1f       	adc	r26, r26
 b2c:	bb 1f       	adc	r27, r27
 b2e:	a6 17       	cp	r26, r22
 b30:	b7 07       	cpc	r27, r23
 b32:	10 f0       	brcs	.+4      	; 0xb38 <__udivmodhi4_ep>
 b34:	a6 1b       	sub	r26, r22
 b36:	b7 0b       	sbc	r27, r23

00000b38 <__udivmodhi4_ep>:
 b38:	88 1f       	adc	r24, r24
 b3a:	99 1f       	adc	r25, r25
 b3c:	5a 95       	dec	r21
 b3e:	a9 f7       	brne	.-22     	; 0xb2a <__udivmodhi4_loop>
 b40:	80 95       	com	r24
 b42:	90 95       	com	r25
 b44:	bc 01       	movw	r22, r24
 b46:	cd 01       	movw	r24, r26
 b48:	08 95       	ret

00000b4a <__divmodhi4>:
 b4a:	97 fb       	bst	r25, 7
 b4c:	09 2e       	mov	r0, r25
 b4e:	07 26       	eor	r0, r23
 b50:	0a d0       	rcall	.+20     	; 0xb66 <__divmodhi4_neg1>
 b52:	77 fd       	sbrc	r23, 7
 b54:	04 d0       	rcall	.+8      	; 0xb5e <__divmodhi4_neg2>
 b56:	e5 df       	rcall	.-54     	; 0xb22 <__udivmodhi4>
 b58:	06 d0       	rcall	.+12     	; 0xb66 <__divmodhi4_neg1>
 b5a:	00 20       	and	r0, r0
 b5c:	1a f4       	brpl	.+6      	; 0xb64 <__divmodhi4_exit>

00000b5e <__divmodhi4_neg2>:
 b5e:	70 95       	com	r23
 b60:	61 95       	neg	r22
 b62:	7f 4f       	sbci	r23, 0xFF	; 255

00000b64 <__divmodhi4_exit>:
 b64:	08 95       	ret

00000b66 <__divmodhi4_neg1>:
 b66:	f6 f7       	brtc	.-4      	; 0xb64 <__divmodhi4_exit>
 b68:	90 95       	com	r25
 b6a:	81 95       	neg	r24
 b6c:	9f 4f       	sbci	r25, 0xFF	; 255
 b6e:	08 95       	ret

00000b70 <do_rand>:
 b70:	a0 e0       	ldi	r26, 0x00	; 0
 b72:	b0 e0       	ldi	r27, 0x00	; 0
 b74:	ed eb       	ldi	r30, 0xBD	; 189
 b76:	f5 e0       	ldi	r31, 0x05	; 5
 b78:	90 c0       	rjmp	.+288    	; 0xc9a <__prologue_saves__+0x10>
 b7a:	ec 01       	movw	r28, r24
 b7c:	a8 80       	ld	r10, Y
 b7e:	b9 80       	ldd	r11, Y+1	; 0x01
 b80:	ca 80       	ldd	r12, Y+2	; 0x02
 b82:	db 80       	ldd	r13, Y+3	; 0x03
 b84:	a1 14       	cp	r10, r1
 b86:	b1 04       	cpc	r11, r1
 b88:	c1 04       	cpc	r12, r1
 b8a:	d1 04       	cpc	r13, r1
 b8c:	41 f4       	brne	.+16     	; 0xb9e <do_rand+0x2e>
 b8e:	84 e2       	ldi	r24, 0x24	; 36
 b90:	a8 2e       	mov	r10, r24
 b92:	89 ed       	ldi	r24, 0xD9	; 217
 b94:	b8 2e       	mov	r11, r24
 b96:	8b e5       	ldi	r24, 0x5B	; 91
 b98:	c8 2e       	mov	r12, r24
 b9a:	87 e0       	ldi	r24, 0x07	; 7
 b9c:	d8 2e       	mov	r13, r24
 b9e:	c6 01       	movw	r24, r12
 ba0:	b5 01       	movw	r22, r10
 ba2:	2d e1       	ldi	r18, 0x1D	; 29
 ba4:	33 ef       	ldi	r19, 0xF3	; 243
 ba6:	41 e0       	ldi	r20, 0x01	; 1
 ba8:	50 e0       	ldi	r21, 0x00	; 0
 baa:	54 d0       	rcall	.+168    	; 0xc54 <__divmodsi4>
 bac:	27 ea       	ldi	r18, 0xA7	; 167
 bae:	31 e4       	ldi	r19, 0x41	; 65
 bb0:	40 e0       	ldi	r20, 0x00	; 0
 bb2:	50 e0       	ldi	r21, 0x00	; 0
 bb4:	36 d0       	rcall	.+108    	; 0xc22 <__mulsi3>
 bb6:	7b 01       	movw	r14, r22
 bb8:	8c 01       	movw	r16, r24
 bba:	c6 01       	movw	r24, r12
 bbc:	b5 01       	movw	r22, r10
 bbe:	2d e1       	ldi	r18, 0x1D	; 29
 bc0:	33 ef       	ldi	r19, 0xF3	; 243
 bc2:	41 e0       	ldi	r20, 0x01	; 1
 bc4:	50 e0       	ldi	r21, 0x00	; 0
 bc6:	46 d0       	rcall	.+140    	; 0xc54 <__divmodsi4>
 bc8:	ca 01       	movw	r24, r20
 bca:	b9 01       	movw	r22, r18
 bcc:	2c ee       	ldi	r18, 0xEC	; 236
 bce:	34 ef       	ldi	r19, 0xF4	; 244
 bd0:	4f ef       	ldi	r20, 0xFF	; 255
 bd2:	5f ef       	ldi	r21, 0xFF	; 255
 bd4:	26 d0       	rcall	.+76     	; 0xc22 <__mulsi3>
 bd6:	6e 0d       	add	r22, r14
 bd8:	7f 1d       	adc	r23, r15
 bda:	80 1f       	adc	r24, r16
 bdc:	91 1f       	adc	r25, r17
 bde:	97 ff       	sbrs	r25, 7
 be0:	04 c0       	rjmp	.+8      	; 0xbea <do_rand+0x7a>
 be2:	61 50       	subi	r22, 0x01	; 1
 be4:	70 40       	sbci	r23, 0x00	; 0
 be6:	80 40       	sbci	r24, 0x00	; 0
 be8:	90 48       	sbci	r25, 0x80	; 128
 bea:	68 83       	st	Y, r22
 bec:	79 83       	std	Y+1, r23	; 0x01
 bee:	8a 83       	std	Y+2, r24	; 0x02
 bf0:	9b 83       	std	Y+3, r25	; 0x03
 bf2:	9b 01       	movw	r18, r22
 bf4:	3f 77       	andi	r19, 0x7F	; 127
 bf6:	c9 01       	movw	r24, r18
 bf8:	cd b7       	in	r28, 0x3d	; 61
 bfa:	de b7       	in	r29, 0x3e	; 62
 bfc:	ea e0       	ldi	r30, 0x0A	; 10
 bfe:	69 c0       	rjmp	.+210    	; 0xcd2 <__epilogue_restores__+0x10>

00000c00 <rand_r>:
 c00:	b7 df       	rcall	.-146    	; 0xb70 <do_rand>
 c02:	08 95       	ret

00000c04 <rand>:
 c04:	80 e0       	ldi	r24, 0x00	; 0
 c06:	91 e0       	ldi	r25, 0x01	; 1
 c08:	b3 df       	rcall	.-154    	; 0xb70 <do_rand>
 c0a:	08 95       	ret

00000c0c <srand>:
 c0c:	a0 e0       	ldi	r26, 0x00	; 0
 c0e:	b0 e0       	ldi	r27, 0x00	; 0
 c10:	80 93 00 01 	sts	0x0100, r24
 c14:	90 93 01 01 	sts	0x0101, r25
 c18:	a0 93 02 01 	sts	0x0102, r26
 c1c:	b0 93 03 01 	sts	0x0103, r27
 c20:	08 95       	ret

00000c22 <__mulsi3>:
 c22:	ff 27       	eor	r31, r31
 c24:	ee 27       	eor	r30, r30
 c26:	bb 27       	eor	r27, r27
 c28:	aa 27       	eor	r26, r26

00000c2a <__mulsi3_loop>:
 c2a:	60 ff       	sbrs	r22, 0
 c2c:	04 c0       	rjmp	.+8      	; 0xc36 <__mulsi3_skip1>
 c2e:	a2 0f       	add	r26, r18
 c30:	b3 1f       	adc	r27, r19
 c32:	e4 1f       	adc	r30, r20
 c34:	f5 1f       	adc	r31, r21

00000c36 <__mulsi3_skip1>:
 c36:	22 0f       	add	r18, r18
 c38:	33 1f       	adc	r19, r19
 c3a:	44 1f       	adc	r20, r20
 c3c:	55 1f       	adc	r21, r21
 c3e:	96 95       	lsr	r25
 c40:	87 95       	ror	r24
 c42:	77 95       	ror	r23
 c44:	67 95       	ror	r22
 c46:	89 f7       	brne	.-30     	; 0xc2a <__mulsi3_loop>
 c48:	00 97       	sbiw	r24, 0x00	; 0
 c4a:	76 07       	cpc	r23, r22
 c4c:	71 f7       	brne	.-36     	; 0xc2a <__mulsi3_loop>

00000c4e <__mulsi3_exit>:
 c4e:	cf 01       	movw	r24, r30
 c50:	bd 01       	movw	r22, r26
 c52:	08 95       	ret

00000c54 <__divmodsi4>:
 c54:	97 fb       	bst	r25, 7
 c56:	09 2e       	mov	r0, r25
 c58:	05 26       	eor	r0, r21
 c5a:	0e d0       	rcall	.+28     	; 0xc78 <__divmodsi4_neg1>
 c5c:	57 fd       	sbrc	r21, 7
 c5e:	04 d0       	rcall	.+8      	; 0xc68 <__divmodsi4_neg2>
 c60:	4b d0       	rcall	.+150    	; 0xcf8 <__udivmodsi4>
 c62:	0a d0       	rcall	.+20     	; 0xc78 <__divmodsi4_neg1>
 c64:	00 1c       	adc	r0, r0
 c66:	38 f4       	brcc	.+14     	; 0xc76 <__divmodsi4_exit>

00000c68 <__divmodsi4_neg2>:
 c68:	50 95       	com	r21
 c6a:	40 95       	com	r20
 c6c:	30 95       	com	r19
 c6e:	21 95       	neg	r18
 c70:	3f 4f       	sbci	r19, 0xFF	; 255
 c72:	4f 4f       	sbci	r20, 0xFF	; 255
 c74:	5f 4f       	sbci	r21, 0xFF	; 255

00000c76 <__divmodsi4_exit>:
 c76:	08 95       	ret

00000c78 <__divmodsi4_neg1>:
 c78:	f6 f7       	brtc	.-4      	; 0xc76 <__divmodsi4_exit>
 c7a:	90 95       	com	r25
 c7c:	80 95       	com	r24
 c7e:	70 95       	com	r23
 c80:	61 95       	neg	r22
 c82:	7f 4f       	sbci	r23, 0xFF	; 255
 c84:	8f 4f       	sbci	r24, 0xFF	; 255
 c86:	9f 4f       	sbci	r25, 0xFF	; 255
 c88:	08 95       	ret

00000c8a <__prologue_saves__>:
 c8a:	2f 92       	push	r2
 c8c:	3f 92       	push	r3
 c8e:	4f 92       	push	r4
 c90:	5f 92       	push	r5
 c92:	6f 92       	push	r6
 c94:	7f 92       	push	r7
 c96:	8f 92       	push	r8
 c98:	9f 92       	push	r9
 c9a:	af 92       	push	r10
 c9c:	bf 92       	push	r11
 c9e:	cf 92       	push	r12
 ca0:	df 92       	push	r13
 ca2:	ef 92       	push	r14
 ca4:	ff 92       	push	r15
 ca6:	0f 93       	push	r16
 ca8:	1f 93       	push	r17
 caa:	cf 93       	push	r28
 cac:	df 93       	push	r29
 cae:	cd b7       	in	r28, 0x3d	; 61
 cb0:	de b7       	in	r29, 0x3e	; 62
 cb2:	ca 1b       	sub	r28, r26
 cb4:	db 0b       	sbc	r29, r27
 cb6:	0f b6       	in	r0, 0x3f	; 63
 cb8:	f8 94       	cli
 cba:	de bf       	out	0x3e, r29	; 62
 cbc:	0f be       	out	0x3f, r0	; 63
 cbe:	cd bf       	out	0x3d, r28	; 61
 cc0:	09 94       	ijmp

00000cc2 <__epilogue_restores__>:
 cc2:	2a 88       	ldd	r2, Y+18	; 0x12
 cc4:	39 88       	ldd	r3, Y+17	; 0x11
 cc6:	48 88       	ldd	r4, Y+16	; 0x10
 cc8:	5f 84       	ldd	r5, Y+15	; 0x0f
 cca:	6e 84       	ldd	r6, Y+14	; 0x0e
 ccc:	7d 84       	ldd	r7, Y+13	; 0x0d
 cce:	8c 84       	ldd	r8, Y+12	; 0x0c
 cd0:	9b 84       	ldd	r9, Y+11	; 0x0b
 cd2:	aa 84       	ldd	r10, Y+10	; 0x0a
 cd4:	b9 84       	ldd	r11, Y+9	; 0x09
 cd6:	c8 84       	ldd	r12, Y+8	; 0x08
 cd8:	df 80       	ldd	r13, Y+7	; 0x07
 cda:	ee 80       	ldd	r14, Y+6	; 0x06
 cdc:	fd 80       	ldd	r15, Y+5	; 0x05
 cde:	0c 81       	ldd	r16, Y+4	; 0x04
 ce0:	1b 81       	ldd	r17, Y+3	; 0x03
 ce2:	aa 81       	ldd	r26, Y+2	; 0x02
 ce4:	b9 81       	ldd	r27, Y+1	; 0x01
 ce6:	ce 0f       	add	r28, r30
 ce8:	d1 1d       	adc	r29, r1
 cea:	0f b6       	in	r0, 0x3f	; 63
 cec:	f8 94       	cli
 cee:	de bf       	out	0x3e, r29	; 62
 cf0:	0f be       	out	0x3f, r0	; 63
 cf2:	cd bf       	out	0x3d, r28	; 61
 cf4:	ed 01       	movw	r28, r26
 cf6:	08 95       	ret

00000cf8 <__udivmodsi4>:
 cf8:	a1 e2       	ldi	r26, 0x21	; 33
 cfa:	1a 2e       	mov	r1, r26
 cfc:	aa 1b       	sub	r26, r26
 cfe:	bb 1b       	sub	r27, r27
 d00:	fd 01       	movw	r30, r26
 d02:	0d c0       	rjmp	.+26     	; 0xd1e <__udivmodsi4_ep>

00000d04 <__udivmodsi4_loop>:
 d04:	aa 1f       	adc	r26, r26
 d06:	bb 1f       	adc	r27, r27
 d08:	ee 1f       	adc	r30, r30
 d0a:	ff 1f       	adc	r31, r31
 d0c:	a2 17       	cp	r26, r18
 d0e:	b3 07       	cpc	r27, r19
 d10:	e4 07       	cpc	r30, r20
 d12:	f5 07       	cpc	r31, r21
 d14:	20 f0       	brcs	.+8      	; 0xd1e <__udivmodsi4_ep>
 d16:	a2 1b       	sub	r26, r18
 d18:	b3 0b       	sbc	r27, r19
 d1a:	e4 0b       	sbc	r30, r20
 d1c:	f5 0b       	sbc	r31, r21

00000d1e <__udivmodsi4_ep>:
 d1e:	66 1f       	adc	r22, r22
 d20:	77 1f       	adc	r23, r23
 d22:	88 1f       	adc	r24, r24
 d24:	99 1f       	adc	r25, r25
 d26:	1a 94       	dec	r1
 d28:	69 f7       	brne	.-38     	; 0xd04 <__udivmodsi4_loop>
 d2a:	60 95       	com	r22
 d2c:	70 95       	com	r23
 d2e:	80 95       	com	r24
 d30:	90 95       	com	r25
 d32:	9b 01       	movw	r18, r22
 d34:	ac 01       	movw	r20, r24
 d36:	bd 01       	movw	r22, r26
 d38:	cf 01       	movw	r24, r30
 d3a:	08 95       	ret

00000d3c <_exit>:
 d3c:	f8 94       	cli

00000d3e <__stop_program>:
 d3e:	ff cf       	rjmp	.-2      	; 0xd3e <__stop_program>
